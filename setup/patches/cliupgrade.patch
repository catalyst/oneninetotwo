diff --git a/admin/cliupgrade.php b/admin/cliupgrade.php
new file mode 100644
index 0000000..6b5afdf
--- /dev/null
+++ b/admin/cliupgrade.php
@@ -0,0 +1,1354 @@
+<?php
+/**
+ * cliupgrade.php 
+ * Command Line Installer and Upgrader for Moodle
+ * @author Dilan Anuruddha
+ * 
+ */
+
+
+//Intruders OUT!!!
+if (!empty($_SERVER['GATEWAY_INTERFACE'])){
+    error_log("cli-installer should not be called from apache!");
+    echo 'This script is not accessible from the webserver';
+    exit;
+}
+
+
+/**
+ * BEFORE YOU ADD/EDIT/DELETE ANYTHING IN THIS DOCUMENT PLEASE READ 
+ * 
+ * When you add some code that print something on to standard out always wrap it around if clause with $verbose
+ * argument check. If the $verbose is CLI_NO, you shouldn't print anything. If $verboser is CLI_SEMI it's ok to print a 
+ * summarized version. If $verbose is CLI_FULL you can print anything you want. 
+ * 
+ * When you add a code that read input from the standard input you should wrap  it with appropriate if clause, allowing 
+ * required level of interaction. Also remember to add the same option as a command line argument list.
+ * In CLI_FULL interaction mode, whether you have set the argument in commandline or not you
+ * should prompt for user input. In CLI_SEMI interaction only the arguments which are not set are prompted for user input. 
+ * No interaction mode doesn't prompt user for anyinput. If any argument is not specified then the default value should be assumed. 
+ * So do the appropriate thing considering this when you edit or delete this code
+ * 
+ */
+//=============================================================================//
+// Set values for initial structures
+
+//Suppress all errors
+error_reporting(E_ALL);
+ini_set('memory_limit', '256M');
+//define constants
+define('CLI_VAL_OPT',0);
+define('CLI_VAL_REQ',1);
+define('CLI_NO',0);
+define('CLI_SEMI',1);
+define('CLI_FULL',2);
+define('CLI_UPGRADE',1);
+
+/// Default array contain default values for all installation options
+/// Please see after library inclusion for more default values - which require libraries
+
+$DEFAULT=array();
+// Set default values
+$DEFAULT['lang']            = 'en_utf8';
+$DEFAULT['dbhost']          = 'localhost';
+$DEFAULT['dbuser']          = '';
+$DEFAULT['dbpass']          = '';
+$DEFAULT['dbtype']          = 'mysql';
+$DEFAULT['dbname']          = 'moodle';
+$DEFAULT['prefix']          = 'mdl_';
+$DEFAULT['downloadlangpack']= false;
+$DEFAULT['wwwroot']         = '';
+$DEFAULT['dirroot']         = dirname(dirname((__FILE__)));
+$DEFAULT['dataroot']        = dirname(dirname(dirname(__FILE__))) . '/moodledata';
+$DEFAULT['admindirname']    = 'admin';
+$DEFAULT['verbose']         = CLI_SEMI;
+$DEFAULT['interactivelevel']= CLI_SEMI;
+
+$DEFAULT['agreelicense']    = true;
+$DEFAULT['confirmrelease']  = true;
+$DEFAULT['sitefullname']    = 'Moodle Site (Please Change Site Name!!)';
+$DEFAULT['siteshortname']   = 'moodle';
+$DEFAULT['sitesummary']     = 'Brief Description of the site';
+$DEFAULT['sitenewsitems']   = 3;
+$DEFAULT['adminusername']   = 'admin';
+$DEFAULT['adminpassword']   = 'admin';
+$DEFAULT['adminemail']      = 'root@localhost';
+
+
+///set valid long options ans state whether value for options is required or optional
+/// Example :If value is required it would be legal to write the script like $php cliupgrade --lang=en_utf8
+///     but writing the script like $php cliupgrade --lang would be illegal.
+///     As you may have already seen $php cliupgrade --help is valid since hep argument had CLI_VAL_OPT set
+
+$LONG_OPTIONS	= array(
+'lang'              =>CLI_VAL_REQ,
+'webaddr'           =>CLI_VAL_REQ,
+'moodledir'         =>CLI_VAL_REQ,
+'datadir'           =>CLI_VAL_REQ,
+'dbtype'            =>CLI_VAL_REQ,
+'dbhost'            =>CLI_VAL_REQ,
+'dbname'            =>CLI_VAL_REQ,
+'dbuser'            =>CLI_VAL_REQ,
+'dbpass'            =>CLI_VAL_REQ,
+'prefix'            =>CLI_VAL_REQ,
+'agreelicense'      =>CLI_VAL_REQ,
+'confirmrelease'    =>CLI_VAL_REQ,
+'sitefullname'      =>CLI_VAL_REQ,
+'siteshortname'     =>CLI_VAL_REQ,
+'sitesummary'       =>CLI_VAL_REQ,
+'sitenewsitems'     =>CLI_VAL_REQ,
+'adminfirstname'    =>CLI_VAL_REQ,
+'adminlastname'     =>CLI_VAL_REQ,
+'adminusername'     =>CLI_VAL_REQ,
+'adminpassword'     =>CLI_VAL_REQ,
+'adminemail'        =>CLI_VAL_REQ,
+'verbose'           =>CLI_VAL_REQ,
+'interactivelevel'  =>CLI_VAL_REQ,
+'help'              =>CLI_VAL_OPT);
+
+//Initialize the intall array
+$INSTALL=array();
+
+$SESSION->lang              = $DEFAULT['lang'];
+$CFG->dirroot               = $DEFAULT['dirroot'];
+$CFG->libdir                = $DEFAULT['dirroot'].'/lib';
+$CFG->dataroot              = $DEFAULT['dataroot'];
+$CFG->admin                 = $DEFAULT['admindirname'];
+$CFG->directorypermissions  = 00777;
+$CFG->running_installer     = true;
+$COURSE->id                 = 0;
+
+// include standard Moodle libraries
+
+require_once($CFG->libdir.'/adminlib.php');
+require_once($CFG->libdir.'/setuplib.php');
+require_once($CFG->libdir.'/moodlelib.php');
+require_once($CFG->libdir.'/weblib.php');
+require_once($CFG->libdir.'/adodb/adodb.inc.php');
+require_once($CFG->libdir.'/environmentlib.php');
+require_once($CFG->libdir.'/xmlize.php');
+require_once($CFG->libdir.'/componentlib.class.php');
+require_once($CFG->libdir.'/installlib.php');			//cli-library
+require_once($CFG->dirroot.'/version.php');
+
+//include PEAR Console libraries
+set_include_path($CFG->libdir . PATH_SEPARATOR . $CFG->libdir . '/pear/');
+require_once('Console/Getopt.php');
+
+
+/// Set default values - things that require the libraries
+$DEFAULT['adminfirstname'] = get_string('admin');
+$DEFAULT['adminlastname']   = get_string('user');
+
+
+
+/// Set version and release
+$INSTALL['version'] = $version;
+$INSTALL['release'] = $release;
+
+
+
+
+//========================================================================================//
+//Command line option processing//
+
+//fetch arguments
+$args = Console_Getopt::readPHPArgv();
+
+//checking errors for argument fetching
+if (PEAR::isError($args)) {
+    console_write(STDOUT,'pearargerror','install');
+    die();
+}
+
+//short options
+$short_opts = '';
+//long options
+$long_opts = create_long_options($LONG_OPTIONS);
+
+
+//get the argumets to options array
+if ( realpath($_SERVER['argv'][0]) == __FILE__ && count($args)>1) {
+    $console_opt = Console_Getopt::getOpt($args,$short_opts,$long_opts);
+} else {
+    $console_opt = Console_Getopt::getOpt($args,$short_opts,$long_opts);
+}
+
+//detect erros in the options
+if (PEAR::isError($console_opt)) {
+    console_write(STDOUT,'invalidargumenthelp');
+    die();
+}
+
+//Get the option values to an array of option keys and values
+$options=get_options($console_opt);
+
+// if user want help print the help without validating option values
+if (is_array($options)) {
+    if(array_key_exists('help',$options)){
+        console_write(STDOUT,'usagehelp');
+        die ;
+    }
+}
+
+//check for validity of options and exit if errors found
+validate_option_values($options);
+
+// insert options array options into INSTALL array
+foreach ( $options as $key=>$value) {
+
+    //map input argument value to INSTALL array values, Argument names kept bcoz they make sense!!!
+    if ( $key == 'moodledir') {
+        $key='dirroot';
+    } else if ($key == 'webaddr'){
+        $key='wwwroot';
+    } else if ($key == 'datadir') {
+        $key = 'dataroot';
+    }
+    $INSTALL[$key]=$value;
+}
+
+
+// if verbose is not set at commandline assume default values
+if (!isset($INSTALL['verbose'])) {
+    $INSTALL['verbose']=$DEFAULT['verbose'];
+}
+//if interactive level is not set at commandline assume default value
+if (!isset($INSTALL['interactivelevel'])) {
+    $INSTALL['interactivelevel'] = $DEFAULT['interactivelevel'];
+}
+
+
+// set references for interactive level and verbose install array
+$interactive    = &$INSTALL['interactivelevel'];
+$verbose        = &$INSTALL['verbose'];
+
+if (!file_exists(dirname(dirname(__FILE__)) . '/config.php')) {
+
+    $configfile = dirname(dirname(__FILE__)) . '/config.php';
+
+
+
+    //welcome message
+    if ($verbose > CLI_NO) {
+        console_write(STDOUT,'welcometext','install');
+    }
+    //============================================================================//
+    //Language selection for the installation
+
+    if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['lang'])) ) ) {
+        $langs=get_installer_list_of_languages();
+
+        console_write(STDOUT,'selectlanguage','install');
+        console_write(STDOUT,'availablelangs','install');
+        //output available languages
+        foreach ( $langs as $language ) {
+            console_write(STDOUT,"\t",'',false);
+            console_write(STDOUT,$language,'',false);
+            console_write(STDOUT,"\n",'',false);
+        }
+        console_write(STDOUT,'yourchoice','install');
+        $short_code_langs = get_short_codes($langs);
+
+        $INSTALL['lang']=read_element($short_code_langs);
+        $SESSION->lang = $INSTALL['lang'];
+    }
+    //==============================================================================//
+    //Checking PHP settings
+
+
+    $silent=false;
+    if ($verbose == CLI_NO) {
+        $silent=true;
+    }else{
+        console_write(STDOUT,'checkingphpsettings','install');
+    }
+    /// Check that PHP is of a sufficient version
+    check_compatibility(inst_check_php_version(), get_string('phpversion', 'install'), get_string('phpversionerror', 'install'),false,$silent);
+    /// Check session auto start
+    check_compatibility(!ini_get_bool('session.auto_start'), get_string('sessionautostart', 'install'), get_string('sessionautostarterror', 'install'),false,$silent);
+    /// Check magic quotes
+    check_compatibility(!ini_get_bool('magic_quotes_runtime'), get_string('magicquotesruntime', 'install'), get_string('magicquotesruntimeerror', 'install'),false,$silent);
+    /// Check unsupported PHP configuration
+    check_compatibility(ini_get_bool('magic_quotes_gpc') || (!ini_get_bool('register_globals')), get_string('globalsquotes', 'install'), get_string('globalsquoteserror', 'install'),false,$silent);
+    /// Check safe mode
+    check_compatibility(!ini_get_bool('safe_mode'), get_string('safemode', 'install'), get_string('safemodeerror', 'install'), true,$silent);
+    /// Check file uploads
+    check_compatibility(ini_get_bool('file_uploads'), get_string('fileuploads', 'install'), get_string('fileuploadserror', 'install'), true,$silent);
+    /// Check GD version
+    check_compatibility(check_gd_version(), get_string('gdversion', 'install'), get_string('gdversionerror', 'install'),  true,$silent);
+    /// Check memory limit
+    check_compatibility(check_memory_limit(), get_string('memorylimit', 'install'), get_string('memorylimiterror', 'install'), true,$silent);
+
+
+
+
+    //================================================================================//
+    // Moodle directories and web address
+
+
+    if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['dirroot']) || !isset($INSTALL['wwwroot']) || !isset($INSTALL['dataroot']) ) ) ) {
+        console_write(STDOUT,'locationanddirectories','install');
+    }
+
+    //input the web directory
+    if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['dirroot'])) ) ) {
+        console_write(STDOUT,'inputwebdirectory','install');
+        //if directories validation lib is found change this to read_dir() and
+        //edit read_dir() in lib/installlib.php to point to validation code
+        $INSTALL['dirroot']=read();
+    }
+    //input the web adress
+    if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['wwwroot'])) ) ) {
+        console_write(STDOUT,'inputwebadress','install');
+        $INSTALL['wwwroot']=read_url();
+    }
+    //input data directory
+    if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['dataroot'])) ) ) {
+        console_write(STDOUT,'inputdatadirectory','install');
+        //if directories validation lib is found change this to read_dir() and
+        //edit read_dir() in lib/installlib.php to point to validation code
+        $INSTALL['dataroot']=read();
+    }
+
+
+    /// check wwwroot
+    if (ini_get('allow_url_fopen') && false) {  /// This was not reliable
+        if (($fh = @fopen($INSTALL['wwwroot'].'/admin/cliupgrade.php', 'r')) === false) {
+            console_write(STDERR,get_string('wwwrooterror'),'install',false);
+        }
+    }
+    if (isset($fh)) fclose($fh);
+
+    /// check dirroot
+    if (($fh = @fopen($INSTALL['dirroot'].'/admin/cliupgrade.php', 'r')) === false ) {
+        console_write(STDERR,get_string('dirrooterror'),'install',false);
+    }
+    if (isset($fh)) fclose($fh);
+
+    /// check dataroot
+    $CFG->dataroot = $INSTALL['dataroot'];
+    if (make_upload_directory('sessions', false) === false ) {
+        console_write(STDERR,get_string('datarooterror'),'install',false);
+    }
+
+    //================================================================================//
+    // Database settings Moodle database
+
+
+    // Database section heading
+    if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['dbhost']) || !isset($INSTALL['dbname']) || !isset($INSTALL['dbtype']) || !isset($INSTALL['dbuser']) ||  !isset($INSTALL['dbpass']) || !isset($INSTALL['prefix']) ) ) ) {
+        console_write(STDOUT,'databasesettingsformoodle','install');
+    }
+
+    //Input dialogs
+    if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['dbhost']) ))) {
+        console_write(STDOUT,'databasehost','install');
+        $INSTALL['dbhost']=read(); // localhost
+    }
+    if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['dbname']) ))) {
+        console_write(STDOUT,'databasename','install');
+        $INSTALL['dbname']=read(); //'moodletest3';
+    }
+    if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['dbtype']) ))) {
+        $dbtypes=array('mysql','oci8po','postgres7','mssql','mssql_n','odbc_mssql');
+        console_write(STDOUT,'availabledbtypes','install');
+        foreach ($dbtypes as $dbtype) {
+            console_write(STDOUT,"\t",'',false);
+            console_write(STDOUT,$dbtype,'install');
+            console_write(STDOUT,"\n",'',false);
+        }
+
+        console_write(STDOUT,'yourchoice','install');
+        $INSTALL['dbtype']=read_element($dbtypes);//'mysql';//
+    }
+
+    if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['dbuser']) ))) {
+        console_write(STDOUT,'databaseuser','install');
+        $INSTALL['dbuser']=read();//'root';
+    }
+
+    if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['dbpass']) ))) {
+        console_write(STDOUT,'databasepass','install');
+        $INSTALL['dbpass']=read();//'';
+    }
+
+    if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['prefix']) ))) {
+        console_write(STDOUT,'tableprefix','install');
+        $INSTALL['prefix']=read();//'mdl_';//
+    }
+
+
+    // Running validation tests
+
+    /// different format for postgres7 by socket
+    if ($INSTALL['dbtype'] == 'postgres7' and ($INSTALL['dbhost'] == 'localhost' || $INSTALL['dbhost'] == '127.0.0.1')) {
+        $INSTALL['dbhost'] = "user='{$INSTALL['dbuser']}' password='{$INSTALL['dbpass']}' dbname='{$INSTALL['dbname']}'";
+        $INSTALL['dbuser'] = '';
+        $INSTALL['dbpass'] = '';
+        $INSTALL['dbname'] = '';
+
+        if ($INSTALL['prefix'] == '') { /// must have a prefix
+            $INSTALL['prefix'] = 'mdl_';
+        }
+    }
+
+    if ($INSTALL['dbtype'] == 'mysql') {  /// Check MySQL extension is present
+        if (!extension_loaded('mysql')) {
+            $errormsg = get_string('mysqlextensionisnotpresentinphp', 'install');
+        }
+    }
+
+    if ($INSTALL['dbtype'] == 'postgres7') {  /// Check PostgreSQL extension is present
+        if (!extension_loaded('pgsql')) {
+            $errormsg = get_string('pgsqlextensionisnotpresentinphp', 'install');
+        }
+    }
+
+    if ($INSTALL['dbtype'] == 'mssql') {  /// Check MSSQL extension is present
+        if (!function_exists('mssql_connect')) {
+            $errormsg = get_string('mssqlextensionisnotpresentinphp', 'install');
+        }
+    }
+
+    if ($INSTALL['dbtype'] == 'mssql_n') {  /// Check MSSQL extension is present
+        if (!function_exists('mssql_connect')) {
+            $errormsg = get_string('mssqlextensionisnotpresentinphp', 'install');
+        }
+    }
+
+    if ($INSTALL['dbtype'] == 'odbc_mssql') {  /// Check ODBC extension is present
+        if (!extension_loaded('odbc')) {
+            $errormsg = get_string('odbcextensionisnotpresentinphp', 'install');
+        }
+    }
+
+    if ($INSTALL['dbtype'] == 'oci8po') {  /// Check OCI extension is present
+        if (!extension_loaded('oci8')) {
+            $errormsg = get_string('ociextensionisnotpresentinphp', 'install');
+        }
+    }
+
+    if (empty($INSTALL['prefix']) && $INSTALL['dbtype'] != 'mysql') { // All DBs but MySQL require prefix (reserv. words)
+        $errormsg = get_string('dbwrongprefix', 'install');
+    }
+
+    if ($INSTALL['dbtype'] == 'oci8po' && strlen($INSTALL['prefix']) > 2) { // Oracle max prefix = 2cc (30cc limit)
+        $errormsg = get_string('dbwrongprefix', 'install');
+    }
+
+    if ($INSTALL['dbtype'] == 'oci8po' && !empty($INSTALL['dbhost'])) { // Oracle host must be blank (tnsnames.ora has it)
+        $errormsg = get_string('dbwronghostserver', 'install');
+    }
+
+    if (empty($errormsg)) {
+
+        /// Have the $db object ready because we are going to use it often
+        // fnarg
+        if (empty($CFG->dbtype)) {
+            $CFG->dbtype = $INSTALL['dbtype'];
+            $resetcfgdb = true;
+        }
+        preconfigure_dbconnection();
+        if (!empty($resetcfgdb)) {
+            $CFG->dbtype = false;
+        }
+        $db = &ADONewConnection($INSTALL['dbtype']);
+
+        $db->SetFetchMode(ADODB_FETCH_ASSOC);
+
+        if (! $dbconnected = $db->Connect($INSTALL['dbhost'],$INSTALL['dbuser'],$INSTALL['dbpass'],$INSTALL['dbname'])) {
+            $errormsg= get_string('cannotconnecttodb','install');
+        } else {
+            /// We have been able to connect properly, just test the database encoding now.
+            /// It must be Unicode for 1.8 installations.
+            $encoding = '';
+            switch ($INSTALL['dbtype']) {
+                case 'mysql':
+                /// Get MySQL character_set_database value
+                $rs = $db->Execute("SHOW VARIABLES LIKE 'character_set_database'");
+                if ($rs && $rs->RecordCount() > 0) {
+                    $records = $rs->GetAssoc(true);
+                    $encoding = $records['character_set_database']['Value'];
+                    if (strtoupper($encoding) != 'UTF8') {
+                        /// Try to set the encoding now!
+                        if (! $db->Metatables()) {  // We have no tables so go ahead
+                            $db->Execute("ALTER DATABASE `".$INSTALL['dbname']."` DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci");
+                            $rs = $db->Execute("SHOW VARIABLES LIKE 'character_set_database'");  // this works
+
+                        }
+                    }
+                    /// If conversion fails, skip, let environment testing do the job
+                }
+                break;
+                case 'postgres7':
+                /// Skip, let environment testing do the job
+                break;
+                case 'oci8po':
+                /// Skip, let environment testing do the job
+                break;
+            }
+        }
+    }
+
+
+    // check for errors in db section
+    if (isset($errormsg)) {
+        console_write(STDERR,$errormsg,'',false);
+    }
+
+
+    //==========================================================================//
+    // Check the environment
+
+    //check connection to database
+
+    $dbconnected = $db->Connect($INSTALL['dbhost'],$INSTALL['dbuser'],$INSTALL['dbpass'],$INSTALL['dbname']);
+    if ($dbconnected) {
+        /// Execute environment check, printing results
+        if (!check_moodle_environment($INSTALL['release'], $environment_results, false)) {
+            $errormsg = get_string('errorsinenvironment', 'install');
+        }
+    } else {
+        /// We never should reach this because DB has been tested before arriving here
+        $errormsg = get_string('dbconnectionerror', 'install');
+    }
+
+    // check for errors in environment
+    if (isset($errormsg)) {
+        console_write(STDERR,$errormsg,'',false);
+    }
+
+    // Print Environment Status
+    if ($verbose > CLI_NO) {
+        print_environment_status($environment_results);
+    }
+
+
+    //==============================================================================//
+    //download the language pack if it doesn't exist
+
+    if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['downloadlangaugepack']) ))) {
+        $site_langs=get_list_of_languages();
+        if (!key_exists($INSTALL['lang'],$site_langs)) {
+            console_write(STDOUT,'downloadlanguagepack','install');
+            $download_lang_pack=read_yes_no();
+            if($download_lang_pack == 'yes'){
+
+                $downloadsuccess = false;
+
+                /// Create necessary lang dir
+                if (!make_upload_directory('lang', false)) {
+                    console_write(STDERR,get_string('cannotcreatelangdir','error'),false);
+                }
+
+                /// Download and install component
+                if (($cd = new component_installer('http://download.moodle.org', 'lang16',
+                $INSTALL['lang'].'.zip', 'languages.md5', 'lang')) && empty($errormsg)) {
+                    $status = $cd->install(); //returns ERROR | UPTODATE | INSTALLED
+                    switch ($status) {
+                        case ERROR:
+                        if ($cd->get_error() == 'remotedownloadnotallowed') {
+                            $a = new stdClass();
+                            $a->url = 'http://download.moodle.org/lang16/'.$pack.'.zip';
+                            $a->dest= $CFG->dataroot.'/lang';
+                            console_write(STDOUT,get_string($cd->get_error(), 'error', $a),false);
+                        } else {
+                            $downloaderror = get_string($cd->get_error(), 'error');
+                            console_write(STDOUT,get_string($cd->get_error(), 'error'),false);
+                        }
+                        break;
+                        case UPTODATE:
+                        case INSTALLED:
+                        $downloadsuccess = true;
+                        break;
+                        default:
+                        //We shouldn't reach this point
+                    }
+                } else {
+                    //We shouldn't reach this point
+                }
+
+
+            }
+        }
+    }
+    
+    if ( $verbose > CLI_NO && $downloadsuccess) {
+        //print success message if language pack download is successful
+        console_write(STDOUT,'downloadsuccess');
+        print_newline();
+    }
+    
+    $CONFFILE = array();
+    //==================================================================================//
+    //set INSTALL array values to CONFFILE array
+    foreach ($INSTALL as $key => $value) {
+        $CONFFILE[$key] = $value;
+    }
+    
+    //==================================================================================//
+    //if any value is not set, set default values
+
+    foreach ($DEFAULT as $key => $value){
+        if (!isset($INSTALL[$key])){
+            $CONFFILE[$key]=$value;
+        }
+    }
+
+
+    //==================================================================================//
+    //create configuration file depending on the previous settings
+
+
+    if ($verbose > CLI_NO) {
+        console_write(STDOUT,'creatingconfigfile','install');
+    }
+
+    $str  = '<?php  /// Moodle Configuration File '."\r\n";
+    $str .= "\r\n";
+
+    $str .= 'unset($CFG);'."\r\n";
+    $str .= "\r\n";
+
+    $str .= '$CFG->dbtype    = \''.$CONFFILE['dbtype']."';\r\n";
+    $str .= '$CFG->dbhost    = \''.addslashes($CONFFILE['dbhost'])."';\r\n";
+    if (!empty($CONFFILE['dbname'])) {
+        $str .= '$CFG->dbname    = \''.$CONFFILE['dbname']."';\r\n";
+        $str .= '$CFG->dbuser    = \''.$CONFFILE['dbuser']."';\r\n";
+        $str .= '$CFG->dbpass    = \''.$CONFFILE['dbpass']."';\r\n";
+    }
+    $str .= '$CFG->dbpersist =  false;'."\r\n";
+    $str .= '$CFG->prefix    = \''.$CONFFILE['prefix']."';\r\n";
+    $str .= "\r\n";
+
+    $str .= '$CFG->wwwroot   = \''.s($CONFFILE['wwwroot'],true)."';\r\n";
+    $str .= '$CFG->dirroot   = \''.s($CONFFILE['dirroot'],true)."';\r\n";
+    $str .= '$CFG->dataroot  = \''.s($CONFFILE['dataroot'],true)."';\r\n";
+    $str .= '$CFG->admin     = \''.s($CONFFILE['admindirname'],true)."';\r\n";
+    $str .= "\r\n";
+
+    $str .= '$CFG->directorypermissions = 00777;  // try 02777 on a server in Safe Mode'."\r\n";
+    $str .= "\r\n";
+
+    $str .= 'require_once("$CFG->dirroot/lib/setup.php");'."\r\n";
+    $str .= '// MAKE SURE WHEN YOU EDIT THIS FILE THAT THERE ARE NO SPACES, BLANK LINES,'."\r\n";
+    $str .= '// RETURNS, OR ANYTHING ELSE AFTER THE TWO CHARACTERS ON THE NEXT LINE.'."\r\n";
+    $str .= '?>';
+
+    umask(0133);
+
+    //save the configuration file
+    if (( $configsuccess = ($fh = @fopen($configfile, 'w')) ) !== false) {
+        fwrite($fh, $str);
+        fclose($fh);
+        if ($verbose > CLI_NO) {
+            console_write(STDOUT,'configfilecreated','install');
+        }
+    } else {
+        console_write(STDERR,'writeconfigfilefailed','install');
+    }
+    if ( $verbose ) {
+        console_write(STDOUT,'installationiscomplete','install');
+    }
+}
+
+
+if ( file_exists(dirname(dirname(__FILE__)) . '/config.php')) {
+    // This is what happens if there is no upgrade....
+    //console_write(STDERR,'configurationfileexist','install');
+    //die;
+
+
+
+    // If the configuration file does not exists exit, this should never occur !!
+    if (!file_exists(dirname(dirname(__FILE__)) . '/config.php')) {
+        console_write(STDERR,'configfiledoesnotexist','install');
+    }
+
+    /// Check that PHP is of a sufficient version
+    /// Moved here because older versions do not allow while(@ob_end_clean());
+    if (version_compare(phpversion(), "4.3.0") < 0) {
+        $phpversion = phpversion();
+        console_write(STDERR,"Sorry, Moodle requires PHP 4.3.0 or later (currently using version $phpversion)",'',false);
+    }
+    /// Turn off time limits and try to flush everything all the time, sometimes upgrades can be slow.
+
+    @set_time_limit(0);
+    @ob_implicit_flush(true);
+    //check with someone who know? that does this do?
+    // while(@ob_end_clean()); // ob_end_flush prevents sending of headers
+
+    //unset();
+
+
+    require_once(dirname(dirname(__FILE__)) . '/config.php');
+    require_once($CFG->libdir.'/adminlib.php');  // Contains various admin-only functions
+    require_once($CFG->libdir.'/ddllib.php'); // Install/upgrade related db functions
+
+    /**
+     * @todo check upgrade status, if upgrader is running already, notify user and exit. 
+     * existing thing might work for this with some modifications
+     * 
+     */
+
+    ///check PHP Settings
+    if (ini_get_bool('session.auto_start')) {
+        console_write(STDERR,"The PHP server variable 'session.auto_start' should be Off ",'',false);
+    }
+
+    if (ini_get_bool('magic_quotes_runtime')) {
+        console_write(STDERR,"The PHP server variable 'magic_quotes_runtime' should be Off ",'',false);
+    }
+
+    if (!ini_get_bool('file_uploads')) {
+
+        console_write(STDERR,"The PHP server variable 'file_uploads' is not turned On" ,'',false);
+    }
+
+    if (empty($CFG->prefix) && $CFG->dbfamily != 'mysql') {  //Enforce prefixes for everybody but mysql
+        console_write(STDERR,'$CFG->prefix can\'t be empty for your target DB (' . $CFG->dbtype . ')','',false);
+    }
+
+    if ($CFG->dbfamily == 'oracle' && strlen($CFG->prefix) > 2) { //Max prefix length for Oracle is 2cc
+        console_write(STDERR,'$CFG->prefix maximum allowed length for Oracle DBs is 2cc.','',false);
+    }
+
+    /// Check that config.php has been edited
+
+    if ($CFG->wwwroot == "http://example.com/moodle") {
+        console_write(STDERR,"Moodle has not been configured yet.  You need to edit config.php first.",'',false);
+    }
+
+
+    /// Check settings in config.php
+
+    $dirroot = realpath(dirname(dirname(__FILE__)));
+    if (!empty($dirroot) and $dirroot != $CFG->dirroot) {
+        console_write(STDERR,"Please fix your settings in config.php:
+              \nYou have:
+              \n\$CFG->dirroot = \"".addslashes($CFG->dirroot)."\";
+              \nbut it should be:
+              \n\$CFG->dirroot = \"".addslashes($dirroot)."\";",'',false);
+    }
+
+    /// Set some necessary variables during set-up to avoid PHP warnings later on this page
+
+
+    if (!isset($CFG->release)) {
+        $CFG->release = "";
+    }
+    if (!isset($CFG->version)) {
+        $CFG->version = "";
+    }
+
+    if (is_readable("$CFG->dirroot/version.php")) {
+        include_once("$CFG->dirroot/version.php");              # defines $version
+    }
+
+    if (!$version or !$release) {
+        console_write(STDERR,'Main version.php was not readable or specified','',false);# without version, stop
+    }
+
+
+    if ( $verbose == CLI_NO ) {
+        $db->debug = false;
+    } else if ( $verbose == CLI_FULL ) {
+        $db->debug = true;
+    }
+
+    /// Check if the main tables have been installed yet or not.
+
+    if (! $tables = $db->Metatables() ) {    // No tables yet at all.
+        $maintables = false;
+
+    } else {                                 // Check for missing main tables
+        $maintables = true;
+        $mtables = array("config", "course", "course_categories", "course_modules",
+        "course_sections", "log", "log_display", "modules",
+        "user");
+        foreach ($mtables as $mtable) {
+            if (!in_array($CFG->prefix.$mtable, $tables)) {
+                $maintables = false;
+                break;
+            }
+        }
+    }
+
+    if (! $maintables) {
+        /// hide errors from headers in case debug enabled in config.php
+        $origdebug = $CFG->debug;
+        $CFG->debug = DEBUG_MINIMAL;
+        error_reporting($CFG->debug);
+
+        if ( $interactive == CLI_FULL || ($interactive == CLI_SEMI && (!isset($INSTALL['agreelicense']) || empty($INSTALL['agreelicense']))) ) {
+            //Print copyright notice and ask to continue
+            console_write(STDOUT,get_string('copyrightnotice'),'',false);
+            print_newline();
+            console_write(STDOUT,get_string('gpl'),'',false);
+            print_newline();
+            console_write(STDOUT,'doyouagree','install',true);
+            $agreelicense = read_boolean();
+        }
+
+        if ( !isset($agreelicense)) {
+            $agreelicense = $DEFAULT['agreelicense'];
+        }
+
+        if (!$agreelicense) {
+            console_write(STDERR,'disagreelicense');
+        }
+
+        if ( $interactive == CLI_FULL || ( $interactive == CLI_SEMI && (!isset($INSTALL['confirmrelease']) || empty($INSTALL['confirmrelease'])))) {
+            console_write(STDOUT,get_string("currentrelease"),'',false);
+            print_newline();
+            console_write(STDOUT,"Moodle $release",'',false);
+            print_newline();
+            console_write(STDOUT,'askcontinue');
+            $confirmrelease = read_boolean();
+        }
+
+        if (!isset($confirmrelease)) {
+            $confirmrelease = $DEFAULT['confirmrelease'];
+        }
+        if (!$confirmrelease) {
+            console_write(STDERR,'versionerror');
+        }
+        $autopilot = 1 ;
+
+        $strdatabasesetup    = get_string("databasesetup");
+        $strdatabasesuccess  = get_string("databasesuccess");
+        //  print_header($strdatabasesetup, $strdatabasesetup, $strdatabasesetup,
+        //                 "", upgrade_get_javascript(), false, "&nbsp;", "&nbsp;");
+        /// return to original debugging level
+        $CFG->debug = $origdebug;
+        error_reporting($CFG->debug);
+        upgrade_log_start();
+
+        /// Both old .sql files and new install.xml are supported
+        /// But we prioritise install.xml (XMLDB) if present
+
+        change_db_encoding(); // first try to change db encoding to utf8
+
+        if (!setup_is_unicodedb()) {
+            // If could not convert successfully, throw error, and prevent installation
+            console_write(STDERR,'unicoderequired', 'admin');
+        }
+
+        $status = false;
+        if (file_exists("$CFG->libdir/db/install.xml")) {
+            $status = install_from_xmldb_file("$CFG->libdir/db/install.xml"); //New method
+        } else if (file_exists("$CFG->libdir/db/$CFG->dbtype.sql")) {
+            $status = modify_database("$CFG->libdir/db/$CFG->dbtype.sql"); //Old method
+        } else {
+            console_write(STDERR,"Error: Your database ($CFG->dbtype) is not yet fully supported by Moodle or install.xml is not present.  See the lib/db directory.",'',false);
+        }
+
+        // all new installs are in unicode - keep for backwards compatibility and 1.8 upgrade checks
+        set_config('unicodedb', 1);
+
+        /// Continue with the instalation
+
+        if ($status) {
+            // Install the roles system.
+            moodle_install_roles();
+            set_config('statsrolesupgraded',time());
+
+            // Write default settings unconditionally (i.e. even if a setting is already set, overwrite it)
+            // (this should only have any effect during initial install).
+            $adminroot = admin_get_root();
+            $adminroot->prune('backups'); // backup settings table not created yet
+            admin_apply_default_settings($adminroot);
+
+            /// This is used to handle any settings that must exist in $CFG but which do not exist in
+            /// admin_get_root()/$ADMIN as admin_setting objects (there are some exceptions).
+            apply_default_exception_settings(array('alternateloginurl' => '',
+            'auth' => 'email',
+            'auth_pop3mailbox' => 'INBOX',
+            'changepassword' => '',
+            'enrol' => 'manual',
+            'enrol_plugins_enabled' => 'manual',
+            'guestloginbutton' => 1,
+            'registerauth' => 'email',
+            'style' => 'default',
+            'template' => 'default',
+            'theme' => 'standardwhite',
+            'filter_multilang_converted' => 1));
+
+            notify($strdatabasesuccess, "green");
+            require_once $CFG->dirroot.'/mnet/lib.php';
+        } else {
+            console_write(STDERR,"Error: Main databases NOT set up successfully",'');
+        }
+
+    }
+
+
+
+
+    /// Check version of Moodle code on disk compared with database
+    /// and upgrade if possible.
+
+    if (file_exists("$CFG->dirroot/lib/db/$CFG->dbtype.php")) {
+        include_once("$CFG->dirroot/lib/db/$CFG->dbtype.php");  # defines old upgrades
+    }
+    if (file_exists("$CFG->dirroot/lib/db/upgrade.php")) {
+        include_once("$CFG->dirroot/lib/db/upgrade.php");  # defines new upgrades
+    }
+
+    $stradministration = get_string("administration");
+
+    if ($CFG->version) {
+        if ($version > $CFG->version) {  // upgrade
+
+            // Upgrades: installations made with early versions of
+            // cliupgrade.php may be missing $CFG->release - and the
+            // environment checks need id. Provide an approx release
+            // string, based on the
+            if (empty($CFG->release)) {
+                if ((int)$CFG->version >= 2007101509) {
+                    $release_to_upgrade = '1.9';
+                } elseif ((int)$CFG->version >= 2007021501) {
+                    $release_to_upgrade = '1.8';
+                }
+                if (!empty($release_to_upgrade)) {
+                    set_config('release', $release_to_upgrade);
+                    $CFG->release = $release_to_upgrade;
+                }
+            }
+
+
+            /// If the database is not already Unicode then we do not allow upgrading!
+            /// Instead, we print an error telling them to upgrade to 1.7 first.  MDL-6857
+            if (empty($CFG->unicodedb)) {
+                console_write(STDERR,'unicodeupgradeerror', 'error');
+            }
+
+            $a->oldversion = "$CFG->release ($CFG->version)";
+            $a->newversion = "$release ($version)";
+            $strdatabasechecking = get_string("databasechecking", "", $a);
+
+            // hide errors from headers in case debug is enabled
+            $origdebug = $CFG->debug;
+            $CFG->debug = DEBUG_MINIMAL;
+            error_reporting($CFG->debug);
+
+            // logout in case we are upgrading from pre 1.7 version - prevention of weird session problems
+            if ($CFG->version < 2006050600) {
+                require_logout();
+            }
+
+            if (empty($confirmupgrade)) {
+
+                if ( $interactive == CLI_FULL || ($interactive == CLI_SEMI && !isset($INSTALL['confirmupgrade']))) {
+                    print_newline();
+                    console_write(STDOUT,$strdatabasechecking,'',false);
+                    print_newline();
+                    console_write(STDOUT,'askcontinue');
+                    $confirmupgrade = read_boolean();
+                }
+            }
+            if (empty($confirmrelease)) {
+
+                if ( $interactive == CLI_FULL || ($interactive == CLI_SEMI && !isset($INSTALL['confirmrelease']))) {
+                    $strcurrentrelease = get_string("currentrelease");
+                    console_write(STDOUT,$strcurrentrelease,'',false);
+                    print_newline();
+                    console_write(STDOUT,"Moodle $release",'',false);
+                    print_newline();
+                    console_write(STDOUT,get_string('releasenoteslink', 'install', 'http://docs.moodle.org/en/Release_Notes'),'',false);
+                    print_newline();
+                    console_write(STDOUT,'askcontinue');
+                    $confirmrelease = read_boolean();
+                }
+                require_once($CFG->libdir.'/environmentlib.php');
+
+                console_write(STDOUT,'environment', 'admin');
+                if (!check_moodle_environment($release, $environment_results, false)) {
+                    // Print Environment Status
+                    if ($verbose > CLI_NO) {
+                        print_newline();
+                        print_environment_status_detailed($environment_results);
+                        print_newline();
+                        console_write(STDOUT,'environmenterrorupgrade', 'admin');
+                    }
+                    if(!read_boolean()){
+                        console_write(STDERR,'','',false);
+                    }
+                } else {
+
+                    if ( $interactive == CLI_FULL || ($interactive == CLI_SEMI && !isset($INSTALL['autopilot']))) {
+                        console_write(STDOUT,'environmentok', 'admin');
+                        console_write(STDOUT,'unattendedoperation','admin');
+                        $autopilot = read_boolean();
+                    }
+                }
+            }
+
+            $strdatabasesuccess  = get_string("databasesuccess");
+
+
+
+            /// return to original debugging level
+            $CFG->debug = $origdebug;
+            error_reporting($CFG->debug);
+            upgrade_log_start();
+
+            /// Upgrade current language pack if we can
+            upgrade_language_pack();
+
+            if ( $verbose > CLI_NO ) {
+                console_write(STDOUT,$strdatabasechecking,'',false);
+            }
+
+            /// Launch the old main upgrade (if exists)
+            $status = true;
+            if (function_exists('main_upgrade')) {
+                $status = main_upgrade($CFG->version);
+            }
+            /// If succesful and exists launch the new main upgrade (XMLDB), called xmldb_main_upgrade
+            if ($status && function_exists('xmldb_main_upgrade')) {
+                $status = xmldb_main_upgrade($CFG->version);
+            }
+
+            /// If successful, continue upgrading roles and setting everything properly
+            if ($status) {
+                if (empty($CFG->rolesactive)) {
+                    // Upgrade to the roles system.
+                    moodle_install_roles();
+                    set_config('rolesactive', 1);
+                } else if (!update_capabilities()) {
+                    console_write(STDERR,'Had trouble upgrading the core capabilities for the Roles System','',false);
+                }
+                require_once($CFG->libdir.'/statslib.php');
+                if (!stats_upgrade_for_roles_wrapper()) {
+                    notify('Couldn\'t upgrade the stats tables to use the new roles system');
+                }
+                if (set_config("version", $version) && set_config("release", $release)) {
+                    remove_dir($CFG->dataroot . '/cache', true); // flush cache
+                    notify($strdatabasesuccess, "green");
+                    /// print_continue("upgradesettings.php");
+                } else {
+                    console_write(STDERR,'Upgrade failed!  (Could not update version or release in config table)','',false);
+                }
+                /// Main upgrade not success
+            } else {
+                console_write(STDERR,'Main Upgrade failed!  See lib/db/upgrade.php','',false);
+
+            }
+            upgrade_log_finish();
+
+        } else if ($version < $CFG->version) {
+            upgrade_log_start();
+            notify("WARNING!!!  The code you are using is OLDER than the version that made these databases!");
+            upgrade_log_finish();
+        }
+    } else {
+        if (!set_config("version", $version)) {
+            console_write(STDERR,"A problem occurred inserting current version into databases",'',false);
+        }
+        if (!set_config("release", $release)) {
+            console_write(STDERR,"A problem occurred inserting current release into databases",'',false);
+        }
+    }
+
+
+    /// Find and check all main modules and load them up or upgrade them if necessary
+    /// first old *.php update and then the new upgrade.php script
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradingactivitymodule','install'),'',1);
+    }
+    upgrade_activity_modules('');// Don't return anywhere
+
+    /// Check all questiontype plugins and upgrade if necessary
+    /// first old *.php update and then the new upgrade.php script
+    /// It is important that this is done AFTER the quiz module has been upgraded
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradingqtypeplugin','install'),'',1);
+    }
+    upgrade_plugins('qtype', 'question/type', '');  // Don't return anywhere
+
+    /// Upgrade backup/restore system if necessary
+    /// first old *.php update and then the new upgrade.php script
+    require_once("$CFG->dirroot/backup/lib.php");
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradingbackupdb','install'),'',1);
+    }
+    upgrade_backup_db('');  // Don't return anywhere
+
+    /// Upgrade blocks system if necessary
+    /// first old *.php update and then the new upgrade.php script
+    require_once("$CFG->dirroot/lib/blocklib.php");
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradingblocksdb','install'),'',1);
+    }
+    upgrade_blocks_db('');  // Don't return anywhere
+
+    /// Check all blocks and load (or upgrade them if necessary)
+    /// first old *.php update and then the new upgrade.php script
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradingblocksplugin','install'),'',1);
+    }
+    upgrade_blocks_plugins('');  // Don't return anywhere
+
+    /// Check all enrolment plugins and upgrade if necessary
+    /// first old *.php update and then the new upgrade.php script
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradingenrolplugin','install'),'',1);
+    }
+    upgrade_plugins('enrol', 'enrol', '');  // Don't return anywhere
+
+    /// Check all course formats and upgrade if necessary
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradingcourseformatplugin','install'),'',1);
+    }
+    upgrade_plugins('format','course/format',''); // Don't return anywhere
+
+    /// Check for local database customisations
+    /// first old *.php update and then the new upgrade.php script
+    require_once("$CFG->dirroot/lib/locallib.php");
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradinglocaldb','install'),'',1);
+    }
+    upgrade_local_db('');  // Don't return anywhere
+
+    /// Check for changes to RPC functions
+    require_once($CFG->dirroot.'/admin/mnet/adminlib.php');
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradingrpcfunctions','install'),'',1);
+    }
+    upgrade_RPC_functions('');  // Don't return anywhere
+
+    /// Upgrade all plugins for gradebook
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradinggradeexportplugin','install'),'',1);
+    }
+    upgrade_plugins('gradeexport', 'grade/export', ''); // Don't return anywhere
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradinggradeimportplugin','install'),'',1);
+    }
+    upgrade_plugins('gradeimport', 'grade/import', ''); // Don't return anywhere
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradinggradereportplugin','install'),'',1);
+    }
+    upgrade_plugins('gradereport', 'grade/report', ''); // Don't return anywhere
+
+    /// Check all message output plugins and upgrade if necessary
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradingmessageoutputplugin','install'),'',1);
+    }
+    upgrade_plugins('message','message/output',''); // Don't return anywhere
+
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradingcoursereportplugin','install'),'',1);
+    }
+    upgrade_plugins('coursereport', 'course/report','');
+
+    if ( $verbose > CLI_NO ) {
+        print_heading(get_string('upgradingadminreportplugin','install'),'',1);
+    }
+    upgrade_plugins('report', (empty($CFG->admin) ? 'admin' : $CFG->admin) .'/report', '');
+
+    /// just make sure upgrade logging is properly terminated
+    upgrade_log_finish();
+
+    unset($_SESSION['installautopilot']);
+
+    /// Set up the site
+    if (! $site = get_site()) {
+        // We are about to create the site "course"
+        require_once($CFG->libdir.'/blocklib.php');
+
+        if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( (!isset($INSTALL['sitefullname'])) || (!isset($INSTALL['siteshortname'])) || (!isset($INSTALL['sitesummary'])) || (!isset($INSTALL['sitenewsitems'])) )) ) {
+            console_write(STDOUT,'siteinfo');
+            print_newline();
+        }
+
+        if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['sitefullname'])) ) ) {
+            console_write(STDOUT,'sitefullname');
+            $sitefullname = read();
+        } else if (isset($INSTALL['sitefullname'])) {
+            $sitefullname = $INSTALL['sitefullname'];
+        }
+
+        if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['siteshortname'])) ) ) {
+            console_write(STDOUT,'siteshortname');
+            $siteshortname = read();
+        } else if (isset($INSTALL['siteshortname'])) {
+            $siteshortname = $INSTALL['siteshortname'];
+        }
+        if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['sitesummary'])) ) ) {
+            console_write(STDOUT,'sitesummary');
+            $sitesummary =read();
+        } else if (isset($INSTALL['sitesummary'])) {
+            $sitesummary = $INSTALL['sitesummary'];
+        }
+        if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['sitenewsitems'])) ) ) {
+            console_write(STDOUT,'sitenewsitems');
+            $sitenewsitems = read_int();
+        } else if (isset($INSTALL['sitenewsitems'])) {
+            $sitenewsitems = $INSTALL['sitenewsitems'];
+        }
+
+        if (!isset($sitefullname)) {
+            $sitefullname = $DEFAULT['sitefullname'];
+        }
+        if (!isset($siteshortname)) {
+            $siteshortname = $DEFAULT['siteshortname'];
+        }
+        if (!isset($sitesummary)) {
+            $sitesummary = $DEFAULT['sitesummary'];
+        }
+        if (!isset($sitenewsitems)) {
+            $sitenewsitems = $DEFAULT['sitenewsitems'];
+        }
+
+        $newsite = new Object();
+        $newsite->fullname = addslashes($sitefullname);
+        $newsite->shortname = addslashes($siteshortname);
+        $newsite->summary = addslashes($sitesummary);
+        $newsite->newsitems = $sitenewsitems;
+        $newsite->numsections = 0;
+        $newsite->category = 0;
+        $newsite->format = 'site';  // Only for this course
+        $newsite->teacher = get_string("defaultcourseteacher");
+        $newsite->teachers = get_string("defaultcourseteachers");
+        $newsite->student = get_string("defaultcoursestudent");
+        $newsite->students = get_string("defaultcoursestudents");
+        $newsite->timemodified = time();
+        
+        if ($newid = insert_record('course', $newsite)) {
+            // Site created, add blocks for it
+            $page = page_create_object(PAGE_COURSE_VIEW, $newid);
+            blocks_repopulate_page($page); // Return value not checked because you can always edit later
+
+            $cat = new Object();
+            $cat->name = get_string('miscellaneous');
+            $cat->depth = 1;
+            if ($catid = insert_record('course_categories', $cat)) {
+                // make sure category context exists
+                get_context_instance(CONTEXT_COURSECAT, $catid);
+                mark_context_dirty('/'.SYSCONTEXTID);
+                // do nothing
+            } else {
+                error("Serious Error! Could not set up a default course category!");
+            }
+        } else {
+            error("Serious Error! Could not set up the site!");
+        }
+    }
+
+    /// Define the unique site ID code if it isn't already
+    if (empty($CFG->siteidentifier)) {    // Unique site identification code
+        set_config('siteidentifier', random_string(32).$_SERVER['HTTP_HOST']);
+    }
+
+    /// Check if the guest user exists.  If not, create one.
+    if (! record_exists("user", "username", "guest")) {
+        if (! $guest = create_guest_record()) {
+            notify("Could not create guest user record !!!");
+        }
+    }
+
+
+    /// Set up the admin user
+    if (empty($CFG->rolesactive)) {
+
+        // If full interactive or semi interactive with at least one option is not set print the admininfo message
+        if ( ($interactive == CLI_FULL) || ($interactive == CLI_SEMI && (!isset($INSTALL['adminfirstname']) || !isset($INSTALL['adminlastname']) || !isset($INSTALL['adminusername']) || !isset($INSTALL['adminpassword']) || !isset($INSTALL['adminemail']) ))) {
+            console_write(STDOUT,'admininfo');
+            print_newline();
+        }
+        // Assign the first name
+        if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['adminfirstname'])) ) ) {
+            console_write(STDOUT,'adminfirstname');
+            $adminfirstname = read();
+        } else if (isset($INSTALL['adminfirstname'])) {
+            $adminfirstname = $INSTALL['adminfirstname'];
+        }
+
+        // Assign the last name
+        if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['adminlastname'])) ) ) {
+            console_write(STDOUT,'adminlastname');
+            $adminlastname = read();
+        } else if (isset($INSTALL['adminlastname'])) {
+            $adminlastname = $INSTALL['adminlastname'];
+        }
+
+        // Assign user name
+        if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['adminusername'])) ) ) {
+            console_write(STDOUT,'adminusername');
+            $adminusername = read();
+        } else if (isset($INSTALL['adminusername'])) {
+            $adminusername = $INSTALL['adminusername'];
+        }
+
+        // Assign password
+        if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['adminpassword'])) ) ) {
+            console_write(STDOUT,'adminpassword');
+            $adminpassword = read();
+        } else if (isset($INSTALL['adminpassword'])) {
+            $adminpassword = $INSTALL['adminpassword'];
+        }
+
+        // Assign email
+        if ( ( $interactive == CLI_FULL ) || ($interactive == CLI_SEMI && ( !isset($INSTALL['adminemail'])) ) ) {
+            console_write(STDOUT,'adminemail');
+            $adminemail = read();
+        } else if (isset($INSTALL['adminemail'])) {
+            $adminemail = $INSTALL['adminemail'];
+        }
+
+        /// If values not set in above set all values to their defaults
+        if (!isset($adminfirstname)) {
+            $adminfirstname = $DEFAULT['adminfirstname'];
+        }
+        if (!isset($adminlastname)) {
+            $adminlastname = $DEFAULT['adminlastname'];
+        }
+        if (!isset($adminusername)) {
+            $adminusername = $DEFAULT['adminusername'];
+        }
+        if (!isset($adminpassword)) {
+            $adminpassword = $DEFAULT['adminpassword'];
+        }
+        if (!isset($adminemail)) {
+            $adminemail = $DEFAULT['adminemail'];
+        }
+
+        $user = new object();
+        $user->auth         = 'manual';
+        $user->firstname    = $adminfirstname;  //get_string('admin');
+        $user->lastname     = $adminlastname;   //get_string('user');
+        $user->username     = $adminusername;   //'admin';
+        $user->password     = hash_internal_user_password($adminpassword);   // 'admin'
+        $user->email        = $adminemail;      //'root@localhost';
+        $user->confirmed    = 1;
+        $user->mnethostid   = $CFG->mnet_localhost_id;
+        $user->lang         = $CFG->lang;
+        $user->maildisplay  = 1;
+        $user->timemodified = time();
+
+        create_admin_user($user);
+    }
+
+    // Set all the settings to their defaults. We need
+    // to fake admin rights for this :-(
+    $admuser = get_admin();
+    $USER = get_complete_user_data('id', $admuser->id);
+    complete_user_login($USER);
+
+    // apply all default settings, do it twice to fill all defaults - some settings depend on other setting
+    admin_get_root(true); // needs to be reloaded
+    admin_apply_default_settings(NULL, true);
+    admin_apply_default_settings(NULL, true);
+    set_config('chat_serverhost', 'localhost'); // won't be set correctly since it relies on $_SERVER['HTTP_HOST']
+
+    if ( $verbose > CLI_NO ) {
+        print_newline();
+        console_write(STDOUT,'upgradingcompleted');
+    }
+}
+
+
+?>
diff --git a/backup/lib.php b/backup/lib.php
index 9298747..ecc38f4 100644
--- a/backup/lib.php
+++ b/backup/lib.php
@@ -1,4 +1,4 @@
-<?php //$Id$
+<?php //$Id: lib.php,v 1.87 2007/08/17 11:19:13 nicolasconnault Exp $
     //This file contains all the general function needed (file manipulation...)
     //not directly part of the backup/restore utility plus some constants
 
@@ -333,7 +333,7 @@
     /// This function upgrades the backup tables, if necessary
     /// It's called from admin/index.php, also backup.php and restore.php
 
-        global $CFG, $db;
+    global $CFG, $db, $interative;
 
         require_once ("$CFG->dirroot/backup/version.php");  // Get code versions
 
@@ -343,12 +343,16 @@
             $navlinks[] = array('name' => $strdatabaseupgrades, 'link' => null, 'type' => 'misc');
             $navigation = build_navigation($navlinks);
 
+        if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
             print_header($strdatabaseupgrades, $strdatabaseupgrades, $navigation, "",
                     upgrade_get_javascript(), false, "&nbsp;", "&nbsp;");
+        }
 
             upgrade_log_start();
             print_heading('backup');
+        if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
             $db->debug=true;
+        }
 
         /// Both old .sql files and new install.xml are supported
         /// but we priorize install.xml (XMLDB) if present
@@ -358,15 +362,25 @@
             } else if (file_exists($CFG->dirroot . '/backup/db/' . $CFG->dbtype . '.sql')) {
                 $status = modify_database($CFG->dirroot . '/backup/db/' . $CFG->dbtype . '.sql'); //Old method
             }
-
+        if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
             $db->debug = false;
+        }
             if ($status) {
                 if (set_config("backup_version", $backup_version) and set_config("backup_release", $backup_release)) {
                     notify(get_string("databasesuccess"), "green");
                     notify(get_string("databaseupgradebackups", "", $backup_version), "green");
+                if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
                     print_continue($continueto);
                     print_footer('none');
                     exit;
+                } else if ( CLI_UPGRADE && ($interative > CLI_SEMI ) ) {
+                    console_write(STDOUT,'askcontinue');
+                    if (read_boolean()){
+                        return ;
+                    }else {
+                        console_write(STDERR,'','',false);
+                    }
+                }
                 } else {
                     error("Upgrade of backup system failed! (Could not update version in config table)");
                 }
@@ -412,22 +426,34 @@
         /// Then, the new function if exists and the old one was ok
             $newupgrade_status = true;
             if ($newupgrade && function_exists($newupgrade_function) && $oldupgrade_status) {
+            if (!defined('CLI_UPGRADE') || !CLI_UPGRADE) {
                 $db->debug = true;
+            }
                 $newupgrade_status = $newupgrade_function($CFG->backup_version);
             } else if ($newupgrade) {
                 notify ('Upgrade function ' . $newupgrade_function . ' was not available in ' .
                         '/backup/db/upgrade.php');
             }
-
+        if (!defined('CLI_UPGRADE') || !CLI_UPGRADE) {
             $db->debug=false;
+        }
         /// Now analyze upgrade results
             if ($oldupgrade_status && $newupgrade_status) {    // No upgrading failed
                 if (set_config("backup_version", $backup_version) and set_config("backup_release", $backup_release)) {
                     notify(get_string("databasesuccess"), "green");
                     notify(get_string("databaseupgradebackups", "", $backup_version), "green");
+                if (!defined('CLI_UPGRADE') || !CLI_UPGRADE) {
                     print_continue($continueto);
                     print_footer('none');
                     exit;
+                } else if (CLI_UPGRADE) {
+                    console_write(STDOUT,'askcontinue');
+                    if (read_boolean()){
+                        return ;
+                    }else {
+                        console_write(STDERR,'','',false);
+                    }
+                }
                 } else {
                     error("Upgrade of backup system failed! (Could not update version in config table)");
                 }
diff --git a/lang/en_utf8/install.php b/lang/en_utf8/install.php
index a2338bb..6774506 100644
--- a/lang/en_utf8/install.php
+++ b/lang/en_utf8/install.php
@@ -1,7 +1,8 @@
-<?PHP // $Id$ 
+<?PHP // $Id: install.php,v 1.14 2007/04/15 14:30:47 skodak Exp $ 
       // install.php - created with Moodle 1.7 beta + (2006101003)
 
-
+$string['aborting'] = '\nAborting ...\n';
+$string['abortinstallation']= 'Aborting installtion ...\n';
 $string['admindirerror'] = 'The admin directory specified is incorrect';
 $string['admindirname'] = 'Admin Directory';
 $string['admindirsetting'] = 'A very few webhosts use /admin as a special URL for you to access a 
@@ -17,18 +18,33 @@ $string['admindirsettingsub'] = 'A very few webhosts use /admin as a special URL
     renaming the admin directory in your installation, and putting that 
     new name here.  For example: <br /> <br /><b>moodleadmin</b><br /> <br />
     This will fix admin links in Moodle.';
+$string['adminemail'] = 'Email :';
+$string['adminfirstname'] = 'First Name :';
+$string['admininfo'] = 'Administrator Details';
+$string['adminlastname'] = 'Last Name :';
+$string['adminpassword'] = 'Password :';
+$string['adminusername'] = 'Username :';
+$string['askcontinue'] = 'Continue (yes/no) :';
+$string['availabledbtypes']='\nAvailable db types \n';
+$string['availablelangs']='List of available languages \n';
+$string['cannotconnecttodb'] = 'Cannot connect to db \n';
 $string['caution'] = 'Caution';
+$string['checkingphpsettings']='\n\nChecking PHP Settings\n\n';
 $string['chooselanguage'] = 'Choose a language';
 $string['chooselanguagehead'] = 'Choose a language';
 $string['chooselanguagesub'] = 'Please choose a language for the installation ONLY. You will be able to choose site and user languages on a later screen.';
 $string['compatibilitysettings'] = 'Checking your PHP settings ...';
 $string['compatibilitysettingshead'] = 'Checking your PHP settings ...';
 $string['compatibilitysettingssub'] = 'Your server should pass all these tests to make Moodle run properly';
+$string['configfilecreated'] = 'Configuration file successfully created\n ';
+$string['configfiledoesnotexist'] = 'Configuration file does not exist !!!';
 $string['configfilenotwritten'] = 'The installer script was not able to automatically create a config.php file containing your chosen settings, probably because the Moodle directory is not writeable. You can manually copy the following code into a file named config.php within the root directory of Moodle.';
 $string['configfilewritten'] = 'config.php has been successfully created';
 $string['configurationcomplete'] = 'Configuration completed';
 $string['configurationcompletehead'] = 'Configuration completed';
 $string['configurationcompletesub'] = 'Moodle made an attempt to save your configuration in a file in the root of your Moodle installation.';
+$string['configurationfileexist']='Configuration file already exist!\n';
+$string['creatingconfigfile'] =' Creating configuration file ...\n';
 $string['database'] = 'Database';
 $string['databasecreationsettings'] = 'Now you need to configure the database settings where most Moodle data
     will be stored.  This database will be created automatically by the installer
@@ -49,6 +65,9 @@ $string['databasecreationsettingssub'] = '<b>Type:</b> fixed to \"mysql\" by the
        <b>User:</b> fixed to \"root\" by the installer<br />
        <b>Password:</b> your database password<br />
        <b>Tables Prefix:</b> optional prefix to use for all table names';
+$string['databasehost']='Database host :';
+$string['databasename']='Database name : ';
+$string['databasepass']='Database password :';
 $string['databasesettings'] = 'Now you need to configure the database where most Moodle data
     will be stored.  This database must already have been created
     and a username and password created to access it.<br />
@@ -59,6 +78,7 @@ $string['databasesettings'] = 'Now you need to configure the database where most
        <b>User:</b> your database username<br />
        <b>Password:</b> your database password<br />
        <b>Tables Prefix:</b> optional prefix to use for all table names';
+$string['databasesettingsformoodle']='\n\nDatabase settings for Moodle\n\n';
 $string['databasesettingshead'] = 'Now you need to configure the database where most Moodle data
     will be stored.  This database must already have been created
     and a username and password created to access it.';
@@ -111,6 +131,8 @@ $string['databasesettingssub_postgres7'] = '<b>Type:</b> PostgreSQL<br />
        <b>Password:</b> your database password<br />
        <b>Tables Prefix:</b> prefix to use for all table names (mandatory)';
 $string['databasesettingswillbecreated'] = '<b>Note:</b> The installer will try to create the database automatically if not exists.';
+$string['databasetype']='Database type :';
+$string['databaseuser']='Database user :';
 $string['dataroot'] = 'Data Directory';
 $string['datarooterror'] = 'The \'Data Directory\' you specified could not be found or created.  Either correct the path or create that directory manually.';
 $string['datarootpublicerror'] = 'The \'Data Directory\' you specified is directly accessible via web, you must use different directory.';
@@ -124,6 +146,7 @@ $string['dbwrongencoding'] = 'The selected database is running under one non-rec
 $string['dbwronghostserver'] = 'You must follow \"Host\" rules as explained above.';
 $string['dbwrongnlslang'] = 'The NLS_LANG environment variable in your web server must use the AL32UTF8 charset. See PHP documentation about how to configure OCI8 properly.';
 $string['dbwrongprefix'] = 'You must follow \"Tables Prefix\" rules as explained above.';
+$string['disagreelicense'] = 'Upgrade cannot proceed due to disagreement to GPL!';
 $string['directorysettings'] = '<p>Please confirm the locations of this Moodle installation.</p>
 
 <p><b>Web Address:</b>
@@ -165,9 +188,13 @@ $string['download'] = 'Download';
 $string['downloadlanguagebutton'] = 'Download the &quot;$a&quot; language pack';
 $string['downloadlanguagehead'] = 'Download language pack';
 $string['downloadlanguagenotneeded'] = 'You may continue the installation process using the default language pack, \"$a\".';
+$string['downloadlanguagepack']='\n\nDo you want to download language pack now(yes/no) :';
 $string['downloadlanguagesub'] = 'You now have the option of downloading a language pack and continuing the installation process in this language.<br /><br />If you are unable to download the language pack, the installation process will continue in English. (Once the installation process is complete, you will have the opportunity to download and install additional language packs.)';
+$string['downloadsuccess'] = 'Language Pack Downloaded Successfuly';
+$string['doyouagree'] = 'Do you agree ? (yes/no):';
 $string['environmenthead'] = 'Checking your environment ...';
 $string['environmentsub'] = 'We are checking if the various components of your system meet the system requirements';
+$string['errorsinenvironment'] ='Errors in the environment !\n';
 $string['fail'] = 'Fail';
 $string['fileuploads'] = 'File Uploads';
 $string['fileuploadserror'] = 'This should be on';
@@ -198,13 +225,32 @@ $string['globalsquoteshelp'] = '<p>Combination of disabled Magic Quotes GPC and
 <p>The recommended setting is <b>magic_quotes_gpc = On</b> and <b>register_globals = Off</b> in your php.ini</p>
 
 <p>If you don\'t have access to your php.ini, you might be able to place the following line in a file 
-   called .htaccess within your Moodle directory:</p>
-   <blockquote><div>php_value magic_quotes_gpc On</div></blockquote>
-   <blockquote><div>php_value register_globals Off</div></blockquote>
-';
+   called .htaccess within your Moodle directory:
+   <blockquote>php_value magic_quotes_gpc On</blockquote>
+   <blockquote>php_value register_globals Off</blockquote>
+</p>';
+$string['inputdatadirectory']='Data Directory :';
+$string['inputwebadress']='Web address :';
+$string['inputwebdirectory']='Moodle Directory :';
 $string['installation'] = 'Installation';
+$string['installationiscomplete'] = 'Installtion is completed !\n';
+$string['invalidargumenthelp']='
+    Error: Invalid argument(s)
+    Usage: \$php cliupgrade.php OPTIONS
+    Use --help option to get more help\n';
+$string['invalidemail'] = 'Invalid Email';
+$string['invalidhost'] = 'Invalid Host ';
+$string['invalidint']='Error: value is not an integer \n';
+$string['invalidintrange'] = 'Error: Value is outside valid range\n';
+$string['invalidpath'] = 'Invalid Path ';
+$string['invalidsetelement']= 'Error: Value given is not in the given options \n';
+$string['invalidtextvalue'] = 'Invalid Text Value';
+$string['invalidurl'] = 'Invalid URL ';
+$string['invalidvalueforlanguage']='Invalid value for --lang option. Type --help for more help\n';
+$string['invalidyesno'] = 'Error: value is not a valid yes/no argument \n';
 $string['langdownloaderror'] = 'Unfortunately the language \"$a\" was not installed. The installation process will continue in English.';
 $string['langdownloadok'] = 'The language \"$a\" was installed successfully. The installation process will continue in this language.';
+$string['locationanddirectories']= '\n\nLocation and directories \n\n';
 $string['magicquotesruntime'] = 'Magic Quotes Run Time';
 $string['magicquotesruntimeerror'] = 'This should be off';
 $string['magicquotesruntimehelp'] = '<p>Magic quotes runtime should be turned off for Moodle to function properly.</p>
@@ -243,11 +289,13 @@ $string['mysql'] = 'MySQL (mysql)';
 $string['mysqli'] = 'Improved MySQL (mysqli)';
 $string['mysqlextensionisnotpresentinphp'] = 'PHP has not been properly configured with the MySQL extension so that it can communicate with MySQL.  Please check your php.ini file or recompile PHP.';
 $string['mysqliextensionisnotpresentinphp'] = 'PHP has not been properly configured with the MySQLi extension so that it can communicate with MySQL.  Please check your php.ini file or recompile PHP.  MySQLi extension is not available for PHP 4.';
+$string['newline'] = '\n';
 $string['oci8po'] = 'Oracle (oci8po)';
 $string['ociextensionisnotpresentinphp'] = 'PHP has not been properly configured with the OCI8 extension so that it can communicate with Oracle.  Please check your php.ini file or recompile PHP.';
 $string['odbc_mssql'] = 'SQL*Server over ODBC (odbc_mssql)';
 $string['odbcextensionisnotpresentinphp'] = 'PHP has not been properly configured with the ODBC extension so that it can communicate with SQL*Server.  Please check your php.ini file or recompile PHP.';
 $string['pass'] = 'Pass';
+$string['pearargerror']='PEAR library cannot identify the arguments\n';
 $string['pgsqlextensionisnotpresentinphp'] = 'PHP has not been properly configured with the PGSQL extension so that it can communicate with PostgreSQL.  Please check your php.ini file or recompile PHP.';
 $string['phpversion'] = 'PHP version';
 $string['phpversionerror'] = 'PHP version must be at least 4.3.0 or 5.1.0 (5.0.x has a number of known problems).';
@@ -256,6 +304,7 @@ $string['phpversionhelp'] = '<p>Moodle requires a PHP version of at least 4.3.0
 <p>You must upgrade PHP or move to a host with a newer version of PHP!<br />
 (In case of 5.0.x you could also downgrade to 4.4.x version)</p>';
 $string['postgres7'] = 'PostgreSQL (postgres7)';
+$string['releasenoteslink'] = 'For information about this version of Moodle, please see Release Notes at $a';
 $string['postgresqlwarning'] = '<strong>Note:</strong> If you experience some connection problems, you can try to set Host Server field as
  host=\'postgresql_host\' port=\'5432\' dbname=\'postgresql_database_name\' user=\'postgresql_user\' password=\'postgresql_user_password\'
 and to leave empty the Database, User and Password fields. More information on <a href=\"http://docs.moodle.org/19/en/Installing_Postgres_for_PHP\">Moodle Docs</a>';
@@ -268,12 +317,64 @@ $string['safemodehelp'] = '<p>Moodle may have a variety of problems with safe mo
    to just find a new web hosting company for your Moodle site.</p>
    
 <p>You can try continuing the install if you like, but expect a few problems later on.</p>';
+$string['selectlanguage']='\n\nSelecting a language for installation\n';
 $string['sessionautostart'] = 'Session Auto Start';
 $string['sessionautostarterror'] = 'This should be off';
 $string['sessionautostarthelp'] = '<p>Moodle requires session support and will not function without it.</p>
 
 <p>Sessions can be enabled in the php.ini file ... look for the session.auto_start parameter.</p>';
+$string['sitefullname'] = 'Site full name :';
+$string['siteinfo'] = 'Site Details';
+$string['sitenewsitems'] = 'News Items :';
+$string['siteshortname'] = 'Site short name :';
+$string['sitesummary'] ='Site summary :';
 $string['skipdbencodingtest'] = 'Skip DB Encoding Test';
+$string['tableprefix']='Table prefix :';
+$string['unsafedirname'] = 'Error: Unsafe characters in directory name. valid characters are a-zA-Z0-9_-\n';
+$string['upgradingactivitymodule']= 'Upgrading Activity Module';
+$string['upgradingbackupdb'] = 'Upgrading Backup Database';
+$string['upgradingblocksdb'] = 'Upgrading Blocks Database';
+$string['upgradingblocksplugin'] = 'Upgrading Blocks Plugin';
+$string['upgradingcompleted'] = 'Upgrading completed...\n';
+$string['upgradingcourseformatplugin'] = 'Upgrading Course Format Pluggin';
+$string['upgradingenrolplugin'] = 'Upgrading Enrol Plugin';
+$string['upgradinggradeexportplugin'] = 'Upgrading Grade Export Plugin';
+$string['upgradinggradeimportplugin'] = 'Upgrading Grame Import Plugin';
+$string['upgradinggradereportplugin'] = 'Upgrading Grade Report Plugin';
+$string['upgradinglocaldb'] = 'Upgrading Local Database';
+$string['upgradingmessageoutputpluggin'] = 'Upgrading Message Output Plugin';
+$string['upgradingqtypeplugin'] = 'Upgrading Question/type Plugin';
+$string['upgradingrpcfunctions'] = 'Upgrading RPC Functions';
+$string['usagehelp']='
+Synopsis:
+\$php cliupgrade.php OPTIONS\n
+OPTIONS
+--lang              Valid installed language for installation. Default is English(en)
+--webaddr           Web address for the Moodle site
+--moodledir         Location of the moodle web folder
+--datadir           Location of the moodle data folder (should not be web visible)
+--dbtype            Database type. Default it mysql
+--dbhost            Database host. Default localhost
+--dbname            Database name. Default is moodle
+--dbuser            Database user. Default is blank
+--dbpass            Database password. Default is blank
+--prefix            Table prefix for above database tables. Default is mdl
+--verbose           0 No output, 1 Summarized output(Default), 2 Detailed output
+--interactivelevel  0 Non interactive, 1 semi interactive(Default), 2 interactive
+--agreelicense      Yes(Default) or No
+--confirmrelease    Yes(Default) or No
+--sitefullname      Full name for the site. Default is : Moodle Site (Please Change Site Name!!)
+--siteshortname     Short name for the site. Default is moodle
+--sitesummary       Summary of the site. Default is blank 
+--adminfirstname    First name of the admin. Default is Admin
+--adminlastname     Last name of the admin. Default is User
+--adminusername     Username for the admin. Default is admin
+--adminpassword     Password for the admin. Default is admin
+--adminemail        Email address of admin. Default is root@localhost
+--help              print out this help\n
+Usage:
+\$php cliupgrade.php --lang=en --webaddr=http://www.example.com --moodledir=/var/www/html/moodle --datadir=/var/moodledata --dbtype=mysql --dbhost=localhost --dbname=moodle --dbuser=root --prefix=mdl --agreelicense=yes --confirmrelease=yes --sitefullname=\"Example Moodle Site\" --siteshortname=moodle --sitesummary=siteforme --adminfirstname=Admin --adminlastname=User --adminusername=admin --adminpassword=admin --adminemail=admin@example.com --verbose=1 --interactivelevel=2 \n';
+$string['versionerror'] = 'User aborted due to version Error ';
 $string['welcomep10'] = '$a->installername ($a->installerversion)';
 $string['welcomep20'] = 'You are seeing this page because you have successfully installed and 
     launched the <strong>$a->packname $a->packversion</strong> package in your computer. Congratulations!';
@@ -288,7 +389,10 @@ $string['welcomep60'] = 'The following pages will lead you through some easy to
     configure and set up <strong>Moodle</strong> on your computer. You may accept the default 
     settings or, optionally, amend them to suit your own needs.';
 $string['welcomep70'] = 'Click the \"Next\" button below to continue with the set up of <strong>Moodle</strong>.';
+$string['welcometext']='\n\n---Welcome to moodle commandline installer---\n\n';
+$string['writetoconfigfilefaild'] = 'Error: Write to config file failed ';
 $string['wwwroot'] = 'Web address';
 $string['wwwrooterror'] = 'The \'Web Address\' does not appear to be valid - this Moodle installation doesn\'t appear to be there. The value below has been reset.';
+$string['yourchoice']='\nYour choice :';
 
 ?>
diff --git a/lib/accesslib.php b/lib/accesslib.php
index 0ab769e..864b7fa 100755
--- a/lib/accesslib.php
+++ b/lib/accesslib.php
@@ -2248,12 +2248,17 @@ function get_system_context($cache=true) {
 
         if (!$context->id = insert_record('context', $context)) {
             // better something than nothing - let's hope it will work somehow
-            if (!defined('SYSCONTEXTID')) {
+            // DONT do it if we're cli because it's IMMUNTABLE.  Doing it during web installer works because
+            // each step is a new request
+            if (!defined('SYSCONTEXTID') && !defined('CLI_UPGRADE')) {
                 define('SYSCONTEXTID', 1);
+                $context->id   = SYSCONTEXTID;
+                $context->path = '/'.SYSCONTEXTID;
+            } else {
+                $context->id   = 0;
+                $context->path = '/0';
             }
             debugging('Can not create system context');
-            $context->id   = SYSCONTEXTID;
-            $context->path = '/'.SYSCONTEXTID;
             return $context;
         }
     }
diff --git a/lib/adminlib.php b/lib/adminlib.php
index 3edd526..1277475 100644
--- a/lib/adminlib.php
+++ b/lib/adminlib.php
@@ -4,7 +4,7 @@
  * adminlib.php - Contains functions that only administrators will ever need to use
  *
  * @author Martin Dougiamas and many others
- * @version  $Id$
+ * @version  $Id: adminlib.php,v 1.149 2007/08/17 19:09:18 nicolasconnault Exp $
  * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
  * @package moodlecore
  */
@@ -52,7 +52,7 @@ function upgrade_blocks_savepoint($result, $version, $type) {
  * @param string $return The url to prompt the user to continue to
  */
 function upgrade_plugins($type, $dir, $return) {
-    global $CFG, $db;
+    global $CFG, $db, $interactive;
 
 /// Let's know if the header has been printed, so the funcion is being called embedded in an outer page
     $embedded = defined('HEADER_PRINTED');
@@ -126,7 +126,9 @@ function upgrade_plugins($type, $dir, $return) {
             $updated_plugins = true;
             upgrade_log_start();
             print_heading($dir.'/'. $plugin->name .' plugin needs upgrading');
-            $db->debug = true;
+            if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
+                $db->debug = true;
+            }
             @set_time_limit(0);  // To allow slow databases to complete the long SQL
 
             if ($CFG->$pluginversion == 0) {    // It's a new install of this plugin
@@ -140,8 +142,9 @@ function upgrade_plugins($type, $dir, $return) {
                 } else {
                     $status = true;
                 }
-
-                $db->debug = false;
+                if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
+                    $db->debug = false;
+                }
             /// Continue with the instalation, roles and other stuff
                 if ($status) {
                 /// OK so far, now update the plugins record
@@ -177,7 +180,9 @@ function upgrade_plugins($type, $dir, $return) {
             /// First, the old function if exists
                 $oldupgrade_status = true;
                 if ($oldupgrade && function_exists($oldupgrade_function)) {
-                    $db->debug = true;
+                    if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
+                        $db->debug = true;
+                    }
                     $oldupgrade_status = $oldupgrade_function($CFG->$pluginversion);
                 } else if ($oldupgrade) {
                     notify ('Upgrade function ' . $oldupgrade_function . ' was not available in ' .
@@ -187,14 +192,17 @@ function upgrade_plugins($type, $dir, $return) {
             /// Then, the new function if exists and the old one was ok
                 $newupgrade_status = true;
                 if ($newupgrade && function_exists($newupgrade_function) && $oldupgrade_status) {
-                    $db->debug = true;
+                    if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
+                        $db->debug = true;
+                    }
                     $newupgrade_status = $newupgrade_function($CFG->$pluginversion);
                 } else if ($newupgrade) {
                     notify ('Upgrade function ' . $newupgrade_function . ' was not available in ' .
                              $fullplug . '/db/upgrade.php');
                 }
-
-                $db->debug=false;
+                if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
+                    $db->debug=false;
+                }
             /// Now analyze upgrade results
                 if ($oldupgrade_status && $newupgrade_status) {    // No upgrading failed
                     // OK so far, now update the plugins record
@@ -208,19 +216,29 @@ function upgrade_plugins($type, $dir, $return) {
                     notify('Upgrading '. $plugin->name .' from '. $CFG->$pluginversion .' to '. $plugin->version .' FAILED!');
                 }
             }
+            if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
             echo '<hr />';
+            }
         } else {
             upgrade_log_start();
             error('Version mismatch: '. $plugin->name .' can\'t downgrade '. $CFG->$pluginversion .' -> '. $plugin->version .' !');
         }
     }
-
     upgrade_log_finish();
 
     if ($updated_plugins && !$embedded) {
+        if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
         print_continue($return);
         print_footer('none');
         die;
+        } else if (CLI_UPGRADE && ($interactive > CLI_SEMI )) {
+            console_write(STDOUT,'askcontinue');
+            if (read_boolean()){
+                return ;
+            }else {
+                console_write(STDERR,'','',false);
+            }
+        }
     }
 }
 
@@ -234,7 +252,7 @@ function upgrade_plugins($type, $dir, $return) {
  */
 function upgrade_activity_modules($return) {
 
-    global $CFG, $db;
+    global $CFG, $db, $interactive;
 
     if (!$mods = get_list_of_plugins('mod') ) {
         error('No modules installed!');
@@ -314,6 +332,7 @@ function upgrade_activity_modules($return) {
                             upgrade_get_javascript(), false, '&nbsp;', '&nbsp;');
                 }
                 upgrade_log_start();
+
                 print_heading($module->name .' module needs upgrading');
 
             /// Run de old and new upgrade functions for the module
@@ -323,7 +342,9 @@ function upgrade_activity_modules($return) {
             /// First, the old function if exists
                 $oldupgrade_status = true;
                 if ($oldupgrade && function_exists($oldupgrade_function)) {
+                    if (!defined('CLI_UPGRADE')|| !CLI_UPGRADE) {
                     $db->debug = true;
+                    }
                     $oldupgrade_status = $oldupgrade_function($currmodule->version, $module);
                     if (!$oldupgrade_status) {
                         notify ('Upgrade function ' . $oldupgrade_function .
@@ -337,14 +358,18 @@ function upgrade_activity_modules($return) {
             /// Then, the new function if exists and the old one was ok
                 $newupgrade_status = true;
                 if ($newupgrade && function_exists($newupgrade_function) && $oldupgrade_status) {
+                    if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
                     $db->debug = true;
+                    }
                     $newupgrade_status = $newupgrade_function($currmodule->version, $module);
                 } else if ($newupgrade && $oldupgrade_status) {
                     notify ('Upgrade function ' . $newupgrade_function . ' was not available in ' .
                              $mod . ': ' . $fullmod . '/db/upgrade.php');
                 }
 
+                if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
                 $db->debug=false;
+                }
             /// Now analyze upgrade results
                 if ($oldupgrade_status && $newupgrade_status) {    // No upgrading failed
                     // OK so far, now update the modules record
@@ -354,7 +379,9 @@ function upgrade_activity_modules($return) {
                     }
                     remove_dir($CFG->dataroot . '/cache', true); // flush cache
                     notify(get_string('modulesuccess', '', $module->name), 'notifysuccess');
+                    if (!defined('CLI_UPGRADE') || !CLI_UPGRADE) {
                     echo '<hr />';
+                    }
                 } else {
                     notify('Upgrading '. $module->name .' from '. $currmodule->version .' to '. $module->version .' FAILED!');
                 }
@@ -374,14 +401,19 @@ function upgrade_activity_modules($return) {
 
         } else {    // module not installed yet, so install it
             if (!$updated_modules) {
+                if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
                 print_header($strmodulesetup, $strmodulesetup,
                         build_navigation(array(array('name' => $strmodulesetup, 'link' => null, 'type' => 'misc'))), '',
                         upgrade_get_javascript(), false, '&nbsp;', '&nbsp;');
             }
+            }
             upgrade_log_start();
             print_heading($module->name);
             $updated_modules = true;
+            // To avoid unnecessary output from the SQL queries in the CLI version
+            if (!defined('CLI_UPGRADE')|| !CLI_UPGRADE ) {
             $db->debug = true;
+            }
             @set_time_limit(0);  // To allow slow databases to complete the long SQL
 
         /// Both old .sql files and new install.xml are supported
@@ -392,7 +424,9 @@ function upgrade_activity_modules($return) {
                 $status = modify_database($fullmod .'/db/'. $CFG->dbtype .'.sql'); //Old method
             }
 
+            if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
             $db->debug = false;
+            }
 
         /// Continue with the installation, roles and other stuff
             if ($status) {
@@ -415,7 +449,9 @@ function upgrade_activity_modules($return) {
                     }
 
                     notify(get_string('modulesuccess', '', $module->name), 'notifysuccess');
+                    if (!defined('CLI_UPGRADE')|| !CLI_UPGRADE ) {
                     echo '<hr />';
+                    }
                 } else {
                     error($module->name .' module could not be added to the module list!');
                 }
@@ -431,7 +467,6 @@ function upgrade_activity_modules($return) {
             $submoduleupgrade();
         }
 
-
     /// Run any defaults or final code that is necessary for this module
 
         if ( is_readable($fullmod .'/defaults.php')) {
@@ -451,9 +486,18 @@ function upgrade_activity_modules($return) {
     upgrade_log_finish(); // finish logging if started
 
     if ($updated_modules) {
+        if (!defined('CLI_UPGRADE')|| !CLI_UPGRADE ) {
         print_continue($return);
         print_footer('none');
         die;
+        } else if ( CLI_UPGRADE && ($interactive > CLI_SEMI) ) {
+            console_write(STDOUT,'askcontinue');
+            if (read_boolean()){
+                return ;
+            }else {
+                console_write(STDERR,'','',false);
+            }
+        }
     }
 }
 
@@ -569,7 +613,7 @@ function upgrade_get_javascript() {
     return $linktoscrolltoerrors;
 }
 
-function create_admin_user() {
+function create_admin_user($user_input=NULL) {
     global $CFG, $USER;
 
     if (empty($CFG->rolesactive)) {   // No admin user yet.
@@ -587,6 +631,9 @@ function create_admin_user() {
         $user->maildisplay  = 1;
         $user->timemodified = time();
 
+        if ($user_input) {
+            $user = $user_input;
+        }
         if (!$user->id = insert_record('user', $user)) {
             error('SERIOUS ERROR: Could not create admin user record !!!');
         }
@@ -611,7 +658,9 @@ function create_admin_user() {
         $USER->newadminuser = 1;
         load_all_capabilities();
 
+        if (!defined('CLI_UPGRADE')||!CLI_UPGRADE) {
         redirect("$CFG->wwwroot/user/editadvanced.php?id=$user->id");  // Edit thyself
+        }
     } else {
         error('Can not create admin!');
     }
diff --git a/lib/blocklib.php b/lib/blocklib.php
index 8cd5a12..2c0c88d 100644
--- a/lib/blocklib.php
+++ b/lib/blocklib.php
@@ -1,4 +1,4 @@
-<?php //$Id$
+<?php //$Id: blocklib.php,v 1.127 2007/08/15 09:25:27 moodler Exp $
 
 //This library includes all the necessary stuff to use blocks in course pages
 
@@ -1082,20 +1082,22 @@ function upgrade_blocks_db($continueto) {
 /// This function upgrades the blocks tables, if necessary
 /// It's called from admin/index.php
 
-    global $CFG, $db;
+    global $CFG, $db, $interactive;
 
     require_once ($CFG->dirroot .'/blocks/version.php');  // Get code versions
 
     if (empty($CFG->blocks_version)) {                  // Blocks have never been installed.
         $strdatabaseupgrades = get_string('databaseupgrades');
+        if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
         print_header($strdatabaseupgrades, $strdatabaseupgrades,
                 build_navigation(array(array('name' => $strdatabaseupgrades, 'link' => null, 'type' => 'misc'))), '',
                 upgrade_get_javascript(), false, '&nbsp;', '&nbsp;');
-
+        }
         upgrade_log_start();
         print_heading('blocks');
+        if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
         $db->debug=true;
-
+        }
     /// Both old .sql files and new install.xml are supported
     /// but we priorize install.xml (XMLDB) if present
         $status = false;
@@ -1104,15 +1106,25 @@ function upgrade_blocks_db($continueto) {
         } else if (file_exists($CFG->dirroot . '/blocks/db/' . $CFG->dbtype . '.sql')) {
             $status = modify_database($CFG->dirroot . '/blocks/db/' . $CFG->dbtype . '.sql'); //Old method
         }
-
+        if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
         $db->debug = false;
+        }
         if ($status) {
             if (set_config('blocks_version', $blocks_version)) {
                 notify(get_string('databasesuccess'), 'notifysuccess');
                 notify(get_string('databaseupgradeblocks', '', $blocks_version), 'notifysuccess');
+                if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
                 print_continue($continueto);
                 print_footer('none');
                 exit;
+                } else if (CLI_UPGRADE && ($interactive > CLI_SEMI) ) {
+                    console_write(STDOUT,'askcontinue');
+                    if (read_boolean()){
+                        return ;
+                    }else {
+                        console_write(STDERR,'','',false);
+                    }
+                }
             } else {
                 error('Upgrade of blocks system failed! (Could not update version in config table)');
             }
@@ -1135,10 +1147,12 @@ function upgrade_blocks_db($continueto) {
 
     if ($blocks_version > $CFG->blocks_version) {       // Upgrade tables
         $strdatabaseupgrades = get_string('databaseupgrades');
+        if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
         print_header($strdatabaseupgrades, $strdatabaseupgrades,
                 build_navigation(array(array('name' => $strdatabaseupgrades, 'link' => null, 'type' => 'misc'))), '', upgrade_get_javascript());
-
+        }
         upgrade_log_start();
+
         print_heading('blocks');
 
     /// Run de old and new upgrade functions for the module
@@ -1148,7 +1162,9 @@ function upgrade_blocks_db($continueto) {
     /// First, the old function if exists
         $oldupgrade_status = true;
         if ($oldupgrade && function_exists($oldupgrade_function)) {
+            if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
             $db->debug = true;
+            }
             $oldupgrade_status = $oldupgrade_function($CFG->blocks_version);
         } else if ($oldupgrade) {
             notify ('Upgrade function ' . $oldupgrade_function . ' was not available in ' .
@@ -1158,22 +1174,27 @@ function upgrade_blocks_db($continueto) {
     /// Then, the new function if exists and the old one was ok
         $newupgrade_status = true;
         if ($newupgrade && function_exists($newupgrade_function) && $oldupgrade_status) {
+            if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
             $db->debug = true;
+            }
             $newupgrade_status = $newupgrade_function($CFG->blocks_version);
         } else if ($newupgrade) {
             notify ('Upgrade function ' . $newupgrade_function . ' was not available in ' .
                      '/blocks/db/upgrade.php');
         }
-
+        if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
         $db->debug=false;
+        }
     /// Now analyze upgrade results
         if ($oldupgrade_status && $newupgrade_status) {    // No upgrading failed
             if (set_config('blocks_version', $blocks_version)) {
                 notify(get_string('databasesuccess'), 'notifysuccess');
                 notify(get_string('databaseupgradeblocks', '', $blocks_version), 'notifysuccess');
+                if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
                 print_continue($continueto);
                 print_footer('none');
                 exit;
+                }
             } else {
                 error('Upgrade of blocks system failed! (Could not update version in config table)');
             }
@@ -1192,7 +1213,7 @@ function upgrade_blocks_db($continueto) {
 //into blocks table or do all the upgrade process if newer
 function upgrade_blocks_plugins($continueto) {
 
-    global $CFG, $db;
+    global $CFG, $db, $interactive;
 
     $blocktitles = array();
     $invalidblocks = array();
@@ -1301,12 +1322,15 @@ function upgrade_blocks_plugins($continueto) {
             } else if ($currblock->version < $block->version) {
                 if (empty($updated_blocks)) {
                     $strblocksetup    = get_string('blocksetup');
+                    if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
                     print_header($strblocksetup, $strblocksetup,
                             build_navigation(array(array('name' => $strblocksetup, 'link' => null, 'type' => 'misc'))), '',
                             upgrade_get_javascript(), false, '&nbsp;', '&nbsp;');
+                    }
                 }
                 $updated_blocks = true;
                 upgrade_log_start();
+
                 print_heading('New version of '.$blocktitle.' ('.$block->name.') exists');
                 @set_time_limit(0);  // To allow slow databases to complete the long SQL
 
@@ -1317,7 +1341,9 @@ function upgrade_blocks_plugins($continueto) {
             /// First, the old function if exists
                 $oldupgrade_status = true;
                 if ($oldupgrade && function_exists($oldupgrade_function)) {
+                    if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
                     $db->debug = true;
+                    }
                     $oldupgrade_status = $oldupgrade_function($currblock->version, $block);
                 } else if ($oldupgrade) {
                     notify ('Upgrade function ' . $oldupgrade_function . ' was not available in ' .
@@ -1327,14 +1353,17 @@ function upgrade_blocks_plugins($continueto) {
             /// Then, the new function if exists and the old one was ok
                 $newupgrade_status = true;
                 if ($newupgrade && function_exists($newupgrade_function) && $oldupgrade_status) {
+                    if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
                     $db->debug = true;
+                    }
                     $newupgrade_status = $newupgrade_function($currblock->version, $block);
                 } else if ($newupgrade) {
                     notify ('Upgrade function ' . $newupgrade_function . ' was not available in ' .
                              $fullblock . '/db/upgrade.php');
                 }
-
+                if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
                 $db->debug=false;
+                }
             /// Now analyze upgrade results
                 if ($oldupgrade_status && $newupgrade_status) {    // No upgrading failed
 
@@ -1356,7 +1385,9 @@ function upgrade_blocks_plugins($continueto) {
                 } else {
                     notify('Upgrading block '. $block->name .' from '. $currblock->version .' to '. $block->version .' FAILED!');
                 }
+                if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
                 echo '<hr />';
+                }
             } else {
                 upgrade_log_start();
                 error('Version mismatch: block '. $block->name .' can\'t downgrade '. $currblock->version .' -> '. $block->version .'!');
@@ -1378,18 +1409,26 @@ function upgrade_blocks_plugins($continueto) {
             if($conflictblock !== false && $conflictblock !== NULL) {
                 // Duplicate block titles are not allowed, they confuse people
                 // AND PHP's associative arrays ;)
+                if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
                 error('<strong>Naming conflict</strong>: block <strong>'.$block->name.'</strong> has the same title with an existing block, <strong>'.$conflictblock.'</strong>!');
+                } else if (CLI_UPGRADE) {
+                    error('Naming conflict: block "'.$block->name.'" has the same title with an existing block, "'.$conflictblock.'"!');
+                }
             }
             if (empty($updated_blocks)) {
                 $strblocksetup    = get_string('blocksetup');
+                if (!defined('CLI_UPGRADE') || !CLI_UPGRADE) {
                 print_header($strblocksetup, $strblocksetup,
                         build_navigation(array(array('name' => $strblocksetup, 'link' => null, 'type' => 'misc'))), '',
                         upgrade_get_javascript(), false, '&nbsp;', '&nbsp;');
             }
+            }
             $updated_blocks = true;
             upgrade_log_start();
             print_heading($block->name);
+            if (!defined('CLI_UPGRADE')||!CLI_UPGRADE) {
             $db->debug = true;
+            }
             @set_time_limit(0);  // To allow slow databases to complete the long SQL
 
         /// Both old .sql files and new install.xml are supported
@@ -1402,8 +1441,9 @@ function upgrade_blocks_plugins($continueto) {
             } else {
                 $status = true;
             }
-
+            if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
             $db->debug = false;
+            }
             if ($status) {
                 if ($block->id = insert_record('block', $block)) {
                     $blockobj->after_install();
@@ -1414,7 +1454,9 @@ function upgrade_blocks_plugins($continueto) {
 
                     events_update_definition($component);
                     notify(get_string('blocksuccess', '', $blocktitle), 'notifysuccess');
+                    if (!defined('CLI_UPGRADE')|| !CLI_UPGRADE) {
                     echo '<hr />';
+                    }
                 } else {
                     error($block->name .' block could not be added to the block list!');
                 }
@@ -1456,9 +1498,18 @@ function upgrade_blocks_plugins($continueto) {
     upgrade_log_finish();
 
     if (!empty($updated_blocks)) {
+        if (!defined('CLI_UPGRADE') || !CLI_UPGRADE) {
         print_continue($continueto);
         print_footer('none');
         die;
+        } else if ( CLI_UPGRADE && ($interactive > CLI_SEMI) ) {
+            console_write(STDOUT,'askcontinue');
+            if (read_boolean()){
+                return ;
+            }else {
+                console_write(STDERR,'','',false);
+            }
+        }
     }
 }
 
diff --git a/lib/dmllib.php b/lib/dmllib.php
index 555841d..c89d27b 100644
--- a/lib/dmllib.php
+++ b/lib/dmllib.php
@@ -1,4 +1,4 @@
-<?php // $Id$
+<?php // $Id: dmllib.php,v 1.103 2007/08/10 16:10:36 stronk7 Exp $
 
 ///////////////////////////////////////////////////////////////////////////
 //                                                                       //
@@ -65,8 +65,10 @@ function execute_sql($command, $feedback=true) {
     $olddebug = $db->debug;
 
     if (!$feedback) {
+        if ( !defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
         $db->debug = false;
     }
+    }
 
     if ($CFG->version >= 2006101007) { //Look for trailing ; from Moodle 1.7.0
         $command = trim($command);
@@ -97,7 +99,11 @@ function execute_sql($command, $feedback=true) {
         return true;
     } else {
         if ($feedback) {
+            if ( defined('CLI_UPGRADE') && CLI_UPGRADE ) {
+                notify(get_string('error'));
+            } else {
             notify('<strong>' . get_string('error') . '</strong>');
+            }
         }
         // these two may go to difference places
         debugging($db->ErrorMsg() .'<br /><br />'. s($command));
diff --git a/lib/installlib.php b/lib/installlib.php
new file mode 100644
index 0000000..d14cf11
--- /dev/null
+++ b/lib/installlib.php
@@ -0,0 +1,632 @@
+<?php
+/**
+ * Functions to support installation process
+ * @author Dilan
+ * 
+ */
+//========================================================================================//
+/**
+ * Check the validity of the language
+ * return true or false
+ *
+ * @param string $lang (short code for language)
+ * @return true/false
+ */
+function valid_language($lang) {
+    global $DEFAULT;
+    $langdir = dir($DEFAULT['dirroot'].'/install/lang');
+    $i=0;
+    $validllangs = array();
+
+    while (false !== ($file=$langdir->read())) {
+        if ($file[0] != '.' ) {
+            $validllangs[$i++]=$file;
+        }
+    }
+    if (in_array($lang,$validllangs)) {
+        return true;
+    } else {
+        return false;
+    }
+}
+//========================================================================================//
+/**
+ * Read from array of language strings and return a array of string elements in which 
+ * both values and keys are set to input array's key 
+ *
+ * @param array $lang string elements
+ * @return array of string element
+ */
+function get_short_codes ($lang = array()) {
+    $short_codes = array();
+
+    foreach ($lang as $key => $value) {
+        $short_codes[$key] = $key;
+    }
+    return  $short_codes;
+}
+//========================================================================================//
+/**
+ * Check value for valid yes/no argument
+ * Return true or false
+ *
+ * @param string $value
+ * @return true/false
+ */
+function valid_yes_no($value){
+    $valid=array('yes','y','n','no');
+    $value=strtolower($value);
+
+    if (in_array($value,$valid)) {
+        if ($value[0]=='y') {
+            return true;
+        } else if ($value[0]=='n') {
+            return true;
+        }
+    } else {
+        return false;
+    }
+}
+//========================================================================================//
+/**
+ * Can value have a valid integer in the given range
+ * Return true or false
+ * @link valid_param()
+ *
+ * 
+ * @param mixedtype $value
+ * @param int $start
+ * @param int $end
+ * @return true/false
+ */
+function valid_int_range($value,$start,$end) {
+    if (valid_param($value,PARAM_INT)) {
+        if ($value < $end && $value > $start) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+}
+
+/**
+ * Take a value and and check it with the given set of values
+ * If value if found in the set return true. False otherwise
+ *
+ * @param mixed type $value
+ * @param array  $set of valid elements
+ * @return boolean
+ */
+
+function valid_element($value,$set) {
+    if(!empty($set)) {
+        //convert all the elements from set to lower case
+        foreach ($set as $key=>$opt) {
+            $set[$key]=strtolower($opt);
+        }
+        $value=strtolower($value);
+        if (in_array($value,$set)) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+}
+
+/**
+ * Take a value and Type of the value 
+ * If value match the type return true, false otherwise
+ * uses {@link clean_param()} in moodlelib.php
+ * @param mixedtype $value
+ * @param int $type
+ * @return boolean
+ */
+function valid_param($value,$type){
+    $clean_val = clean_param($value,$type);
+    if ($clean_val == $value) {
+        return true;
+    }else {
+        return false;
+    }
+}
+//========================================================================================//
+/**
+ * Creat long arument list for PEAR method invocation using LONGOPTOIN array
+ *
+ * @param long option array $long_opt
+ * @return PEAR method compatible long option array 
+ */
+function create_long_options($long_opt) {
+    $opt=array();
+    $i=0;
+    if (is_array($long_opt)) {
+        foreach ($long_opt as $key=>$value) {
+            if ($value == CLI_VAL_REQ) {
+                $opt[$i++]=$key.'=';
+            } else if ($value == CLI_VAL_OPT) {
+                $opt[$i++]=$key.'==';
+            }
+
+        }
+    }
+    return $opt;
+}
+//========================================================================================//
+/**
+ * This funtion return an array of options with option as key containing the value of 
+ * respective option
+ *
+ * @param array of option arguments as defined by PEAR GetOpt calss $opt
+ * @return return a options arguments with options as keys and values as respective value for key
+ */
+function get_options($opt=array()) {
+
+    global $LONG_OPTIONS;
+    $ret_arr=array();
+
+    //get the options from the defined list of arguments
+    if (!empty($opt[0]) && is_array($opt[0])) {
+
+        foreach ($opt[0] as $key=>$value) {
+
+            if (substr($value[0],0,2)=='--') {			//if the argument is a long option
+                $input_option=substr($value[0],2);
+            } else if (substr($value[0],0,1)=='-'){		//if the argument is a short option
+                $input_option=substr($value[0],1);
+            }
+
+            //check with valid set of options
+            if (in_array($input_option,$LONG_OPTIONS)) {
+                $ret_arr[$input_option]=$value[1];
+            }
+        }
+
+    }
+    //return array
+    return $ret_arr;
+
+}
+
+//========================================================================================//
+
+/**
+ * This function returns a list of languages and their full names. 
+ * The list of available languages is fetched from install/lang/xx/installer.php
+ * and it's used exclusively by the installation process 
+ * @return array An associative array with contents in the form of LanguageCode => LanguageName
+ */
+function get_installer_list_of_languages() {
+
+    global $CFG;
+
+    $languages = array();
+
+    /// Get raw list of lang directories
+    $langdirs = get_list_of_plugins('install/lang');
+    asort($langdirs);
+    /// Get some info from each lang
+    foreach ($langdirs as $lang) {
+        if (file_exists($CFG->dirroot .'/install/lang/'. $lang .'/installer.php')) {
+            include($CFG->dirroot .'/install/lang/'. $lang .'/installer.php');
+            if (substr($lang, -5) == '_utf8') {   //Remove the _utf8 suffix from the lang to show
+                $shortlang = substr($lang, 0, -5);
+            } else {
+                $shortlang = $lang;
+            }
+            //if ($lang == 'en') {  //Explain this is non-utf8 en
+            //    $shortlang = 'non-utf8 en';
+            //}
+            if (!empty($string['thislanguage'])) {
+                $languages[$lang] = $string['thislanguage'] .' ('. $lang .')';
+            }
+            unset($string);
+        }
+    }
+    /// Return array
+    return $languages;
+}
+//=========================================================================//
+/**
+ * Validate options values 
+ *
+ * @param array $options
+ */
+function validate_option_values($options){
+    $values=array();
+    $i=0;
+    foreach ($options as $val) {
+        $values[$i++]=$val;
+    }
+    if (isset($values['lang'])) {
+        if (!valid_language($INSTALL['lang'])) {
+            console_write(STDERR,'invalidvalueforlanguage');
+        }
+    }
+    if (isset($values['webdir'])) {
+        /**
+		 * @todo check valid directory path
+		 */
+    }
+    if (isset($values['webaddr'])) {
+        /**
+		 * @todo check valid http url
+		 */
+    }
+    if (isset($values['moodledir'])) {
+        /**
+		 * @todo check valid directory path
+		 */
+    }
+    if (isset($values['datadir'])) {
+        /**
+		 * @todo check valid directory path
+		 */
+    }
+    if (isset($values['dbtype'])) {
+        $dbtypes=array('mysql','oci8po','postgres7','mssql','mssql_n','odbc_mssql');
+        if (!in_array($values['dbtype'],$dbtypes)) {
+            console_write(STDERR,'invaliddbtype');
+        }
+    }
+    if (isset($values['dbhost'])) {
+        /**
+		 * @todo check host?
+		 */
+    }
+    if (isset($values['dbname'])) {
+        /**
+		 * @todo check name for valid ones if required
+		 */
+    }
+    if (isset($values['dbuser'])) {
+        /**
+		 * @todo check validity of db user if required
+		 */
+    }
+    if (isset($values['dbpass'])) {
+        /**
+		 * @todo check validity of database password if required 
+		 */
+    }
+    if (isset($values['prefix'])) {
+        /**
+		 * @todo check for valid prefix
+		 */
+    }
+    if (isset($values['sitefullname'])) {
+        /**
+		 * @todo check for valid fullname for site
+		 */
+    }
+     if (isset($values['siteshortname'])) {
+        /**
+		 * @todo check for valid short name for site
+		 */
+    }
+     if (isset($values['sitesummary'])) {
+        /**
+		 * @todo check for valid summary
+		 */
+    }
+     if (isset($values['sitenewsitems'])) {
+        /**
+		 * @todo check for valid news items
+		 */
+    }
+    if (isset($values['adminfirstname'])) {
+        /**
+         * @todo check for valid admin first name
+         */
+    }
+     if (isset($values['adminlastname'])) {
+        /**
+		 * @todo check for valid last name
+		 */
+    }
+     if (isset($values['adminusername'])) {
+        /**
+		 * @todo check for valid username
+		 */
+    }
+     if (isset($values['adminpassword'])) {
+        /**
+		 * @todo check for valid password
+		 */
+    }
+     if (isset($values['adminemail'])) {
+        /**
+		 * @todo check for valid email
+		 */
+    }
+    if (isset($values['verbose'])) {
+        if(!valid_int_range($values['verbose'],CLI_NO,CLI_FULL)){
+            console_write(STDERR,'invalidverbosevalue');
+        }
+    }
+    if (isset($values['interactivelevel'])) {
+        if(!valid_int_range($values['verbose'],CLI_NO,CLI_FULL)){
+            console_write(STDERR,'invalidinteractivevalue');
+        }
+    }
+
+    if (isset($values['help'])) {
+        /**
+		 * @todo  nothing really
+		 */
+    }
+}
+//=========================================================================//
+/**
+ * Write to standard out and error with exit in error
+ *
+ * @param standard out/err $stream
+ * @param string  $identifier
+ * @param name of module $module
+ */
+function console_write($stream,$identifier,$module='install',$use_string_lib=true) {
+    if ($use_string_lib) {
+        fwrite($stream,get_string($identifier,$module));
+    } else {
+        fwrite($stream,$identifier);
+    }
+    if ($stream == STDERR) {
+        fwrite($stream,get_string('aborting',$module));
+        die;
+    }
+}
+//=========================================================================//
+/**
+ * Read a mixed type
+ *
+ * @param stream $from
+ * @param int $size
+ * @return mixed type
+ */
+function read($from=STDIN,$size=1024) {
+    $input= trim(fread($from,$size));
+    return $input;
+}
+/**
+ * Read an integer
+ *
+ * @return integer
+ */
+function read_int() {
+    $input=read();
+    if (valid_param($input,PARAM_INT)) {
+        return $input;
+    } else {
+        console_write(STDERR,'invalidint');
+    }
+}
+//=========================================================================//
+/**
+ * Read and integer value within range
+ *
+ * @param int $start
+ * @param int $end
+ * @return int
+ */
+function read_int_range($start,$end) {
+    $input=read_int();
+    if (valid_int_range($input,$start,$end)) {
+        return $input;
+    } else {
+        console_write(STDERR,'invalidintrange');
+    }
+
+}
+//=========================================================================//
+/**
+ * Read yes/no argument
+ *
+ * @return string yes/no
+ */
+function read_yes_no() {
+    $input=strtolower(read());
+    if (valid_yes_no($input)) {
+        if ($input[0]=='y') {
+            return 'yes';
+        } else if($input[0]=='n') {
+            return 'no';
+        }
+    } else {
+        console_write(STDERR,'invalidyesno');
+    }
+}
+
+//=========================================================================//
+/**
+ * Read a boolean parameter from the input
+ *
+ * @return boolean
+ */
+function read_boolean(){
+    $input=read_yes_no();
+    return clean_param($input,PARAM_BOOL);
+
+}
+//=========================================================================//
+/**
+ * Reading an element from a given set
+ *
+ * @param mixed type array $set
+ * @return mixed type
+ */
+function read_element($set=array()) {
+    $input=read();
+    if (valid_element($input,$set)) {
+        return $input;
+    } else {
+        console_write(STDERR,'invalidsetelement');
+    }
+}
+//=========================================================================//
+function read_url() {
+    $input = read();
+    $localhost = false;
+    if ( strpos($input,'localhost') !== false) {
+        $input = str_replace('localhost','127.0.0.1',$input);
+        $localhost=true;
+    }
+    if (valid_param($input,PARAM_URL)) {
+        if ($localhost) {
+            return str_replace('127.0.0.1','localhost',$input);
+        } else {
+            return  $input;
+        }
+    } else {
+        console_write(STDERR,'invalidurl');
+    }
+
+}
+//=========================================================================//
+/**
+ * Enter description here...
+ *
+ * @return string
+ */
+function read_dir() {
+    $input = read();
+    return  $input;
+}
+//===========================================================================//
+/**
+ * Print compatibility message to standard out, and errors to standard error
+ *
+ * @param boolean $success
+ * @param string $testtext
+ * @param string $errormessage
+ * @param boolean $caution
+ * @param boolean $silent
+ * @return boolean
+ */
+function check_compatibility($success, $testtext,$errormessage,$caution=false,$silent=false) {
+    if ($success) {
+        if (!$silent) {
+            console_write(STDOUT,get_string('pass', 'install'),'',false);
+        }
+    } else {
+        if ($caution) {
+            if (!$silent) {
+                console_write(STDOUT,get_string('caution', 'install'),'',false);
+            }
+        } else {
+            console_write(STDOUT,get_string('fail', 'install'),'',false);
+            console_write(STDERR,$errormessage,'',false);
+        }
+    }
+    if (!$silent) {
+        console_write(STDOUT,"\t\t",'',false);
+        console_write(STDOUT,$testtext,'',false);
+        console_write(STDOUT,"\n",'',false);
+    }
+    return $success;
+}
+
+//==========================================================================//
+/**
+ * Get memeory limit
+ *
+ * @return int
+ */
+function get_memory_limit() {
+    if ($limit = ini_get('memory_limit')) {
+        return $limit;
+    } else {
+        return get_cfg_var('memory_limit');
+    }
+}
+
+//==========================================================================//
+/**
+ * Check memory limit
+ *
+ * @return boolean
+ */
+function check_memory_limit() {
+
+    /// if limit is already 40 or more then we don't care if we can change it or not
+    if ((int)str_replace('M', '', get_memory_limit()) >= 40) {
+        return true;
+    }
+
+    /// Otherwise, see if we can change it ourselves
+    @ini_set('memory_limit', '40M');
+    return ((int)str_replace('M', '', get_memory_limit()) >= 40);
+}
+
+//==========================================================================//
+/**
+ * Check php version
+ *
+ * @return boolean
+ */
+function inst_check_php_version() {
+    if (!check_php_version("4.3.0")) {
+        return false;
+    } else if (check_php_version("5.0.0")) {
+        return check_php_version("5.1.0"); // 5.0.x is too buggy
+    }
+    return true; // 4.3.x or 4.4.x is fine
+}
+/**
+ * Print environment status to standard out
+ *
+ * @param array $env, of type object
+ */
+function print_environment_status($env = array()) {
+    console_write(STDOUT,"Status\t\tInfo\t\tPart\n\r",'',false);
+    foreach ( $env as  $object) {
+
+        if ($object->status == 1 ) {
+            console_write(STDOUT,'ok','',false);
+        } else {
+            console_write(STDOUT,'fail','',false);
+        }
+        console_write(STDOUT,"\t\t",'',false);
+        console_write(STDOUT,$object->info,'',false);
+        console_write(STDOUT,"\t\t",'',false);
+        console_write(STDOUT,$object->part,'',false);
+        console_write(STDOUT,"\n\r",'',false);
+    }
+}
+
+/**
+ * Print environment status to standard out
+ *
+ * @param array $env, of type object
+ */
+function print_environment_status_detailed($env = array()) {
+    console_write(STDOUT,"Status\t\tLevel\t\tCurrent ver\tRequired ver\t\tPart\t\tInfo\n\r",'',false);
+    foreach ( $env as  $object) {
+
+        if ($object->status == 1 ) {
+            console_write(STDOUT,'ok ','',false);
+        } else if ($object->errorcode != 0) {
+            console_write(STDOUT,'fail ','',false);
+        } else {
+            console_write(STDOUT,'----','',false);
+        }
+        console_write(STDOUT,"\t\t",'',false);
+        console_write(STDOUT,$object->level,'',false);
+        console_write(STDOUT,"\t\t",'',false);
+        console_write(STDOUT,$object->current_version,'',false);
+        console_write(STDOUT,"\t",'',false);
+        console_write(STDOUT,$object->needed_version,'',false);
+        console_write(STDOUT,"\t\t",'',false);
+        console_write(STDOUT,$object->part,'',false);
+        console_write(STDOUT,"\t\t",'',false);
+        console_write(STDOUT,$object->info,'',false);
+        console_write(STDOUT,"\n\r",'',false);
+    }
+}
+/**
+ * Print a new line in the standard output
+ *
+ */
+
+function print_newline() {
+    console_write(STDOUT,'newline','install');
+}
+?>
diff --git a/lib/locallib.php b/lib/locallib.php
index c2f84a0..d41571c 100644
--- a/lib/locallib.php
+++ b/lib/locallib.php
@@ -151,26 +151,43 @@ function upgrade_local_db($continueto) {
 
     if ($local_version > $CFG->local_version) { // upgrade!
         $strdatabaseupgrades = get_string('databaseupgrades');
+        if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
         print_header($strdatabaseupgrades, $strdatabaseupgrades,
             build_navigation(array(array('name' => $strdatabaseupgrades, 'link' => null, 'type' => 'misc'))), '', upgrade_get_javascript());
+        }
 
         upgrade_log_start();
         require_once ($CFG->dirroot .'/local/db/upgrade.php');
 
+        if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
         $db->debug=true;
+        }
         if (xmldb_local_upgrade($CFG->local_version)) {
+            if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
             $db->debug=false;
+            }
             if (set_config('local_version', $local_version)) {
                 notify(get_string('databasesuccess'), 'notifysuccess');
                 notify(get_string('databaseupgradelocal', '', $local_version), 'notifysuccess');
+                if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
                 print_continue($continueto);
                 print_footer('none');
                 exit;
+                } else if (CLI_UPGRADE && ($interactive > CLI_SEMI) ) {
+                    console_write(STDOUT,'askcontinue');
+                    if (read_boolean()){
+                        return ;
+                    }else {
+                        console_write(STDERR,'','',false);
+                    }
+                }
             } else {
                 error('Upgrade of local database customisations failed! (Could not update version in config table)');
             }
         } else {
+            if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
             $db->debug=false;
+            }
             error('Upgrade failed!  See local/version.php');
         }
 
diff --git a/lib/setup.php b/lib/setup.php
index 9a71075..b436687 100644
--- a/lib/setup.php
+++ b/lib/setup.php
@@ -5,7 +5,7 @@
  * Normally this is only called by the main config.php file
  * Normally this file does not need to be edited.
  * @author Martin Dougiamas
- * @version $Id$
+ * @version $Id: setup.php,v 1.204 2007/08/15 18:55:59 skodak Exp $
  * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
  * @package moodlecore
  */
@@ -80,13 +80,14 @@ global $HTTPSPAGEREQUIRED;
 
 /// First try to detect some attacks on older buggy PHP versions
     if (isset($_REQUEST['GLOBALS']) || isset($_COOKIE['GLOBALS']) || isset($_FILES['GLOBALS'])) {
-        die('Fatal: Illegal GLOBALS overwrite attempt detected!');
+        trigger_error('Fatal: Illegal GLOBALS overwrite attempt detected!');
+        exit(1);
     }
 
 
     if (!isset($CFG->wwwroot)) {
         trigger_error('Fatal: $CFG->wwwroot is not configured! Exiting.');
-        die;
+        exit(1);
     }
 
 /// sometimes default PHP settings are borked on shared hosting servers, I wonder why they have to do that??
@@ -185,7 +186,7 @@ global $HTTPSPAGEREQUIRED;
                fwrite($fp, time());
             }
         }
-        die;
+        exit(1);
     }
 
 /// Forcing ASSOC mode for ADOdb (some DBs default to FETCH_BOTH)
diff --git a/lib/setuplib.php b/lib/setuplib.php
index 32f9a70..4cbf124 100644
--- a/lib/setuplib.php
+++ b/lib/setuplib.php
@@ -308,6 +308,9 @@ function set_dbfamily() {
  */
 function preconfigure_dbconnection() {
 
+    if (defined('ADODB_ASSOC_CASE')) { 
+        return; // when in cli mode, it's possible for this to be called twice (eg cli installer)
+    }
     global $CFG;
 
 /// Define dbfamily
diff --git a/lib/weblib.php b/lib/weblib.php
index 36271fc..7a18438 100644
--- a/lib/weblib.php
+++ b/lib/weblib.php
@@ -1,4 +1,4 @@
-<?php // $Id$
+<?php // $Id: weblib.php,v 1.927 2007/08/17 07:25:48 nicolasconnault Exp $
 
 ///////////////////////////////////////////////////////////////////////////
 //                                                                       //
@@ -33,7 +33,7 @@
  * - datalib.php - functions that access the database.
  * - moodlelib.php - general-purpose Moodle functions.
  * @author Martin Dougiamas
- * @version  $Id$
+ * @version  $Id: weblib.php,v 1.927 2007/08/17 07:25:48 nicolasconnault Exp $
  * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
  * @package moodlecore
  */
@@ -2549,6 +2549,16 @@ function print_header ($title='', $heading='', $navigation='', $focus='',
 
     $heading = format_string($heading); // Fix for MDL-8582
 
+    if (defined('CLI_UPGRADE') && CLI_UPGRADE ) {
+        $output = $heading;
+        if ($return) {
+            return $output;
+        } else {
+            console_write(STDOUT,$output,'',false);
+            return;
+        }
+    }
+
 /// This makes sure that the header is never repeated twice on a page
     if (defined('HEADER_PRINTED')) {
         debugging('print_header() was called more than once - this should not happen.  Please check the code for this page closely. Note: error() and redirect() are now safe to call after print_header().');
@@ -4007,18 +4017,33 @@ function print_headline($text, $size=2, $return=false) {
  * @param int $size The size to set the font for text display.
  */
 function print_heading($text, $align='', $size=2, $class='main', $return=false) {
+    global $verbose;
     if ($align) {
         $align = ' style="text-align:'.$align.';"';
     }
     if ($class) {
         $class = ' class="'.$class.'"';
     }
+    if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
     $output = "<h$size $align $class>".stripslashes_safe($text)."</h$size>";
+    } else if ( CLI_UPGRADE ) {
+        $output = stripslashes_safe($text);
+        if ($size == 1) {
+            $output = '=>'.$output;
+        } else if ($size == 2) {
+            $output = '-->'.$output;
+        }
+    }
 
     if ($return) {
         return $output;
     } else {
+        if (!defined('CLI_UPGRADE') || !CLI_UPGRADE ) {
         echo $output;
+        } else if (CLI_UPGRADE && ($verbose > CLI_NO) ) {
+            console_write(STDOUT,$output,'',false);
+            print_newline();
+        }
     }
 }
 
@@ -5857,6 +5882,11 @@ function print_error($errorcode, $module='error', $link='', $a=NULL, $extralocat
         }
     }
 
+    if (defined('CLI_UPGRADE') && CLI_UPGRADE) {
+        console_write(STDERR,$message,'',false);
+        die ;
+    }
+
     if (defined('FULLME') && FULLME == 'cron') {
         // Errors in cron should be mtrace'd.
         mtrace($message);
@@ -6306,13 +6336,20 @@ function redirect($url, $message='', $delay=-1) {
  * @param bool $return whether to return an output string or echo now
  */
 function notify($message, $style='notifyproblem', $align='center', $return=false) {
+    global $db;
+
     if ($style == 'green') {
         $style = 'notifysuccess';  // backward compatible with old color system
     }
 
     $message = clean_text($message);
-
+    
+    $output = '';
+    if(!defined('CLI_UPGRADE')||!CLI_UPGRADE) {
     $output = '<div class="'.$style.'" style="text-align:'. $align .'">'. $message .'</div>'."\n";
+    } else if (CLI_UPGRADE && $db->debug) {
+        $output = '++'.$message.'++';
+    }
 
     if ($return) {
         return $output;
